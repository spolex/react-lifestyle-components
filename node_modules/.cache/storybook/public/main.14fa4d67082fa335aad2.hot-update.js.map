{"version":3,"file":"main.14fa4d67082fa335aad2.hot-update.js","sources":["webpack:///./src/components/Calendar/MonthView.js"],"sourcesContent":["import './styles.module.css';\n\nimport Moment from 'moment';\nimport { extendMoment } from 'moment-range';\n\nconst moment = extendMoment(Moment);\nimport { useEffect, useState } from 'react';\n\nexport const MonthView = ({ year, month, onCellClick }) => {\n  const [startDate, setStartDate] = useState(moment(year.concat('-').concat(month)));\n  const [firstDay, setFirstDay] = useState(moment(year.concat('-').concat(month)).startOf('month'));\n  const [endDay, setEndDay] = useState(moment(year.concat('-').concat(month)).endOf('moth'));\n  const [monthRange, setMonthRange] = useState(\n    Array.from(\n      moment\n        .range(\n          moment(year.concat('-').concat(month)).startOf('month').toDate(),\n          moment(year.concat('-').concat(month)).endOf('month').toDate(),\n        )\n        .by('days'),\n    ),\n  );\n  const [weeks, setWeeks] = useState([]);\n\n  useEffect(() => {\n    const startDate = moment(year.concat('-').concat(month));\n    setFirstDay(startDate.startOf('month'));\n    setEndDay(startDate.endOf('month'));\n    const newMonthRange = Array.from(\n      moment\n        .range(startDate.startOf('month').toDate(), startDate.endOf('month').toDate())\n        .by('days'),\n    );\n    const newWeeks = [];\n    newMonthRange.map(d => {\n      if (!newWeeks.includes(d.week())) {\n        newWeeks.push(d.week());\n      }\n    });\n    setWeeks(newWeeks);\n    setMonthRange(newMonthRange);\n  }, [month, year]);\n\n  return (\n    <div className=\"table-responsive\">\n      <table className=\"table table-bordered\">\n        <thead>\n          <tr>\n            <th scope=\"col\"></th>\n            {moment.weekdays().map(weekDay => (\n              <th scope=\"col\" key={weekDay} className=\"days-of-week\">\n                {weekDay}\n              </th>\n            ))}\n          </tr>\n        </thead>\n        <tbody>\n          {weeks.map(week => {\n            const weekStart = moment().week(week).startOf('week').format();\n            const weekEnd = moment().week(week).endOf('week').format();\n            const weekRange = Array.from(moment.range(weekStart, weekEnd).by('day'));\n            return (\n              <tr key={week}>\n                <th scope=\"row\">{week}</th>\n                {weekRange.map(d => (\n                  <td\n                    className={\n                      d.format('MM') != firstDay.format('MM') ? 'text-secondary' : 'text-body'\n                    }\n                    data-value={d.format()}\n                    onClick={e => onCellClick(e.target.dataset.value)}\n                  >\n                    {d.format('DD')}\n                  </td>\n                ))}\n              </tr>\n            );\n          })}\n          {/* {weeksRange.map(week => {\n            var daysRange = Array.from(\n              moment.range(week.startOf('week').toDate(), week.endOf('week').toDate()).by('day'),\n            );\n\n            return (\n              <tr>\n                {daysRange.map(d => (\n                  <td\n                    data-value={d.format()}\n                    className={d.format('MM') != month ? 'text-secondary' : 'text-body'}\n                    onClick={e => onCellClick(e.target.dataset.value)}\n                  >\n                    {d.format('DD')}\n                  </td>\n                ))}\n              </tr>\n            );\n          })} */}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAEA;AACA;AAEA;AACA;;;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AASA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AADA;AAFA;AADA;AAUA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AAGA;AACA;AAAA;AAAA;AALA;AAAA;AADA;AAFA;AAeA;AArBA;AAXA;AADA;AAyDA;AA7FA;;;;;;;;;;;;;;;;;A","sourceRoot":""}