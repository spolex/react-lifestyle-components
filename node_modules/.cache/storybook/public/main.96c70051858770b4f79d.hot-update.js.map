{"version":3,"file":"main.96c70051858770b4f79d.hot-update.js","sources":["webpack:///./src/components/Barchart/Barchart.js","webpack:///./src/components/Barchart/index.js","webpack:///./src/components/Chart/Chart.js","webpack:///./src/stories/DT.stories.jsx"],"sourcesContent":["import { Bar, Chart } from '../Chart/Chart';\n\nexport * from './Barchart';\n// import { Chart, Bar } from './Chart';\n\nexport const Barchart = ({ data }) => {\n  // Width of each bar\n  const itemWidth = 20;\n\n  //   // Distance between each bar\n  const itemMargin = 5;\n\n  const dataLength = data.length;\n\n  //   // Normalize data, we'll reduce all sizes to 25% of their original value\n  const massagedData = data.map(datum => Object.assign({}, datum, { repos: datum.repos * 0.25 }));\n\n  const mostRepos = massagedData.reduce((acc, cur) => {\n    const { repos } = cur;\n    return repos > acc ? repos : acc;\n  }, 0);\n\n  const chartHeight = mostRepos;\n\n  return (\n    <div>\n      <Chart width={dataLength * (itemWidth + itemMargin)} height={chartHeight}>\n        {massagedData.map((datum, index) => (\n          <Bar\n            key={datum.name}\n            x={index * (itemWidth + itemMargin)}\n            y={0}\n            width={itemWidth}\n            height={datum.repos}\n            fill=\"teal\"\n          />\n        ))}\n      </Chart>\n    </div>\n  );\n};\n","export * from './Barchart';\n","export const Chart = ({ children, width, height }) => (\n  <svg viewBox={`0 0 ${width} ${height}`} width={width} height={height}>\n    {children}\n  </svg>\n);\n\nexport const Bar = ({ fill = '#000', x, y, width, height }) => (\n  <rect fill={fill} x={x} y={y} width={width} height={height} />\n);\n","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import { Barchart } from '../components/Barchart';\\n\\nexport default {\\n  /* ðŸ‘‡ The title prop is optional.\\n   * See https://storybook.js.org/docs/react/configure/overview#configure-story-loading\\n   * to learn how to generate automatic titles\\n   */\\n  title: 'DT story',\\n  component: Barchart,\\n};\\n\\nconst data = [\\n  {\\n    name: 'April',\\n    repos: 150,\\n  },\\n  {\\n    name: 'May',\\n    repos: 210,\\n  },\\n  {\\n    name: 'June',\\n    repos: 222,\\n  },\\n  {\\n    name: 'July',\\n    repos: 243,\\n  },\\n  {\\n    name: 'August',\\n    repos: 200,\\n  },\\n  {\\n    name: 'September',\\n    repos: 280,\\n  },\\n  {\\n    name: 'October',\\n    repos: 330,\\n  },\\n  {\\n    name: 'November',\\n    repos: 370,\\n  },\\n  {\\n    name: 'December',\\n    repos: 350,\\n  },\\n  {\\n    name: 'January',\\n    repos: 410,\\n  },\\n  {\\n    name: 'February',\\n    repos: 415,\\n  },\\n  {\\n    name: 'March',\\n    repos: 475,\\n  },\\n];\\n\\nexport const DTStory = () => {\\n  return (<Barchart data={data} />);\\n};\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"DTStory\":{\"startLoc\":{\"col\":23,\"line\":63},\"endLoc\":{\"col\":1,\"line\":65},\"startBody\":{\"col\":23,\"line\":63},\"endBody\":{\"col\":1,\"line\":65}}};\n    \nimport { Barchart } from '../components/Barchart';\n\nexport default {\n  /* ðŸ‘‡ The title prop is optional.\n   * See https://storybook.js.org/docs/react/configure/overview#configure-story-loading\n   * to learn how to generate automatic titles\n   */\n  title: 'DT story',\n  component: Barchart,\n};\n\nconst data = [\n  {\n    name: 'April',\n    repos: 150,\n  },\n  {\n    name: 'May',\n    repos: 210,\n  },\n  {\n    name: 'June',\n    repos: 222,\n  },\n  {\n    name: 'July',\n    repos: 243,\n  },\n  {\n    name: 'August',\n    repos: 200,\n  },\n  {\n    name: 'September',\n    repos: 280,\n  },\n  {\n    name: 'October',\n    repos: 330,\n  },\n  {\n    name: 'November',\n    repos: 370,\n  },\n  {\n    name: 'December',\n    repos: 350,\n  },\n  {\n    name: 'January',\n    repos: 410,\n  },\n  {\n    name: 'February',\n    repos: 415,\n  },\n  {\n    name: 'March',\n    repos: 475,\n  },\n];\n\nexport const DTStory = () => {\n  return (<Barchart data={data} />);\n};\n\n\n\nDTStory.parameters = { storySource: { source: \"() => {\\n  return (<Barchart data={data} />);\\n}\" }, ...DTStory.parameters };"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAEA;AACA;AAEA;AAAA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AACA;AACA;AANA;AADA;AADA;AADA;AAeA;AAnCA;;;;;;;;;;;;;;;;;;;;;;;;;;ACLA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACLA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AAEA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAMA;AACA;AAAA;AAAA;AACA;AAFA;AAMA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;A","sourceRoot":""}