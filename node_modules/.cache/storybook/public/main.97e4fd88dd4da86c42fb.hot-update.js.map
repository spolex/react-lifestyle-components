{"version":3,"file":"main.97e4fd88dd4da86c42fb.hot-update.js","sources":["webpack:///./src/components/Food/Food.js","webpack:///./src/components/Meal/Meal.js","webpack:///./src/components/Repetition/Rep.js","webpack:///./src/components/Serie/Serie.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Button, Input } from 'reactstrap';\n\nexport const Food = ({ id, units, name, group, portion, prot, carb, fat, editable }) => {\n  const [_id, setId] = useState(id);\n  const [_units, setUnits] = useState(units);\n  const [_name, setName] = useState(name);\n  const [_group, setGroup] = useState(group);\n  const [_portion, setPortion] = useState(portion);\n  const [_prot, setProt] = useState(prot);\n  const [_carb, setCarb] = useState(carb);\n  const [_fat, setFat] = useState(fat);\n  const [cals, setCals] = useState();\n  const [isEditable, setIsEditable] = useState(editable);\n  const [isDone, setIsDone] = useState(false);\n\n  useEffect(() => {\n    setIsEditable(editable);\n    calulateCalories();\n  }, [editable]);\n\n  const calulateCalories = () => {\n    setCals(Math.round((_carb + _prot) * 4 + _fat * 9));\n  };\n\n  const handleOnclickEdit = e => {\n    setIsEditable(true);\n  };\n\n  const handleOnclickDone = e => {\n    setIsEditable(false);\n  };\n\n  const handleProtOnChange = value => {\n    setProt(Number(value));\n    calulateCalories();\n  };\n\n  const handleCarbOnChange = value => {\n    setCarb(Number(value));\n    calulateCalories();\n  };\n\n  const handleFatOnChange = value => {\n    setProt(Number(value));\n    calulateCalories();\n  };\n\n  return (\n    <tr>\n      <th scope=\"row\">{_id}</th>\n      <td>\n        {isEditable ? (\n          <Input type=\"text\" value={_name} onChange={event => setName(event.target.value)} />\n        ) : (\n          _name\n        )}\n      </td>\n      <td>\n        {isEditable ? (\n          <Input type=\"text\" value={_group} onChange={event => setGroup(event.target.value)} />\n        ) : (\n          _group\n        )}\n      </td>\n      <td>\n        {isEditable ? (\n          <Input\n            type=\"number\"\n            value={_portion}\n            onChange={event => setPortion(event.target.value)}\n          />\n        ) : (\n          _portion + ' ' + _units\n        )}\n      </td>\n      <td>{cals}</td>\n      <td>\n        {isEditable ? (\n          <Input\n            type=\"number\"\n            value={_prot}\n            onChange={event => handleProtOnChange(event.target.value)}\n          />\n        ) : (\n          _prot + ' g'\n        )}\n      </td>\n      <td>\n        {isEditable ? (\n          <Input type=\"number\" value={_carb} onChange={event => setCarb(event.target.value)} />\n        ) : (\n          _carb + ' g'\n        )}\n      </td>\n      <td>\n        {isEditable ? (\n          <Input type=\"number\" value={_fat} onChange={event => setFat(event.target.value)} />\n        ) : (\n          _fat + ' g'\n        )}\n      </td>\n      <td>\n        <Button\n          color={!isEditable ? 'primary' : 'danger'}\n          onClick={!isEditable ? handleOnclickEdit : handleOnclickDone}\n        >\n          {!isEditable ? 'edit' : 'done'}\n        </Button>\n      </td>\n    </tr>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { Button, Col, Container, Row, Table } from 'reactstrap';\nimport { Food } from '../Food/Food';\n\nexport const Meal = ({ title, editable, foods, units }) => {\n  const [_foods, setFoods] = useState(foods);\n  const [totalCarb, setTotalCarb] = useState(0);\n  const [totalProt, setTotalProt] = useState(0);\n  const [totalFat, setTotalFat] = useState(0);\n  const [_units, setUnits] = useState(units);\n  const [isEditable, setIsEditable] = useState(editable);\n\n  useEffect(() => {\n    setIsEditable(editable);\n  }, [editable]);\n\n  const handleOnSave = () => {\n    setIsEditable(false);\n  };\n\n  const handleOnAdd = () => {\n    setFoods([..._foods, { id: _foods.length + 1, prot: 0, carb: 0, fat: 0 }]);\n  };\n\n  const handleOnDelete = () => {\n    setFoods(_foods.filter(food => food.id !== _foods.length));\n  };\n\n  return (\n    <Container>\n      <Row>\n        <h2>{title}</h2>\n      </Row>\n      <Row>\n        <Table>\n          <thead>\n            <tr>\n              <th>#</th>\n              <th>name</th>\n              <th>group</th>\n              <th>portion</th>\n              <th>calories</th>\n              <th>proteins</th>\n              <th>carbohydrates</th>\n              <th>fat</th>\n            </tr>\n          </thead>\n          <tbody>\n            {_foods.map(item => (\n              <Food\n                units={item.units}\n                key={item.id}\n                id={item.id}\n                name={item.name}\n                group={item.group}\n                portion={item.portion}\n                carb={item.carb}\n                prot={item.prot}\n                fat={item.fat}\n                editable={isEditable}\n              ></Food>\n            ))}\n          </tbody>\n        </Table>\n      </Row>\n      <Row>\n        <Col xs={8}>\n          <Button color=\"success\" onClick={handleOnSave}>\n            Save\n          </Button>\n        </Col>\n        <Col xs={4}>\n          <Button color=\"danger\" onClick={handleOnDelete}>\n            -\n          </Button>\n          <Button color=\"primary\" onClick={handleOnAdd}>\n            +\n          </Button>\n        </Col>\n      </Row>\n    </Container>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { Button } from 'reactstrap';\n\nexport const Rep = ({ id, numReps, weigth, editable }) => {\n  const [_weigth, setWeigth] = useState(weigth);\n  const [_numReps, setNumReps] = useState(numReps);\n  const [isEditable, setIsEditable] = useState(editable);\n  const [isDone, setIsDone] = useState(false);\n\n  useEffect(() => {\n    setIsEditable(editable);\n    setWeigth(weigth);\n    setNumReps(numReps);\n  }, [editable, weigth, numReps]);\n\n  const handleOnclickEdit = e => {\n    setIsEditable(true);\n  };\n\n  const handleOnclickDone = e => {\n    setIsEditable(false);\n  };\n\n  return (\n    <tr>\n      <th scope=\"row\">{id}</th>\n      <td>\n        {isEditable ? (\n          <input value={_numReps} onChange={event => setNum(event.target.value)} />\n        ) : (\n          _numReps\n        )}\n      </td>\n      <td>\n        {isEditable ? (\n          <input value={_weigth} onChange={event => setWeigth(event.target.value)} />\n        ) : (\n          _weigth\n        )}\n      </td>\n      <td>\n        <Button\n          color={!isEditable ? 'primary' : 'danger'}\n          onClick={!isEditable ? handleOnclickEdit : handleOnclickDone}\n        >\n          {!isEditable ? 'edit' : 'done'}\n        </Button>\n      </td>\n    </tr>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { Button, Col, Container, Row, Table } from 'reactstrap';\nimport { Rep } from '../Repetition/Rep';\n\nexport const Serie = ({ numSeries, numReps, editable, size, weigth }) => {\n  const [series, setSeries] = useState(Array.from(Array(numSeries).keys()));\n  const [isEditable, setIsEditable] = useState(editable);\n  const [_weigth, setWeigth] = useState(weigth);\n  const [_numReps, setNumReps] = useState(numReps);\n  const [title, setTitle] = useState(size);\n\n  useEffect(() => {\n    setIsEditable(editable);\n    console.log(numSeries);\n    setSeries(Array.from(Array(numSeries).keys()));\n    console.log(series);\n    setWeigth(weigth);\n    setNumReps(numReps);\n  }, [editable, numSeries, numReps, weigth, size]);\n\n  const handleOnSave = () => {\n    setIsEditable(false);\n  };\n\n  const handleOnAdd = () => {\n    setSeries([...series, series.length + 1]);\n  };\n\n  const handleOnDelete = () => {\n    setSeries(series.filter(id => id !== series.length));\n  };\n\n  return (\n    <Container>\n      <Row>\n        <h2>This is a {title} size serie</h2>\n      </Row>\n      <Row>\n        <Table>\n          <thead>\n            <tr>\n              <th>#</th>\n              <th>#repetitions</th>\n              <th>weight</th>\n            </tr>\n          </thead>\n          <tbody>\n            {series.map(r => (\n              <Rep key={r} id={r} numReps={_numReps} weigth={_weigth} editable={isEditable}></Rep>\n            ))}\n          </tbody>\n        </Table>\n      </Row>\n      <Row>\n        <Col xs={8}>\n          <Button color=\"success\" onClick={handleOnSave}>\n            Save\n          </Button>\n        </Col>\n        <Col xs={4}>\n          <Button color=\"danger\" onClick={handleOnDelete}>\n            -\n          </Button>\n          <Button color=\"primary\" onClick={handleOnAdd}>\n            +\n          </Button>\n        </Col>\n      </Row>\n    </Container>\n  );\n};\n"],"mappings":"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","sourceRoot":""}