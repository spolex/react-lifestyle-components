{"version":3,"file":"main.a6435c597d2899be2d13.hot-update.js","sources":["webpack:///./src/components/Food/Food.js","webpack:///./src/components/Meal/Meal.js","webpack:///./src/components/Repetition/Rep.js","webpack:///./src/components/Serie/Serie.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { Button, Input } from 'reactstrap';\n\nexport const Food = ({ item, editable, handleItemOnChange }) => {\n  const [isEditable, setIsEditable] = useState(editable);\n  const [isDone, setIsDone] = useState(false);\n\n  const handleOnclickEdit = e => {\n    setIsEditable(true);\n  };\n\n  const handleOnclickDone = e => {\n    setIsEditable(false);\n  };\n\n  return (\n    <tr>\n      <th scope=\"row\">{item.id}</th>\n      <td>\n        {isEditable ? (\n          <Input\n            type=\"text\"\n            value={item.name}\n            onChange={event => handleItemOnChange({ ...item, name: event.target.value })}\n          />\n        ) : (\n          item.name\n        )}{' '}\n      </td>\n      <td>\n        {isEditable ? (\n          <Input\n            type=\"text\"\n            value={item.group}\n            onChange={event => handleItemOnChange({ ...item, group: event.target.value })}\n          />\n        ) : (\n          item.group\n        )}\n      </td>\n      <td>\n        {isEditable ? (\n          <Input\n            type=\"number\"\n            value={item.portion}\n            onChange={event => handleItemOnChange({ ...item, portion: Number(event.target.value) })}\n            min={0}\n          />\n        ) : (\n          item.portion + ' ' + item.units\n        )}\n      </td>\n      <td>{Math.round((item.carb + item.prot) * 4 + item.fat * 9)}</td>\n      <td>\n        {isEditable ? (\n          <Input\n            type=\"number\"\n            value={item.prot}\n            onChange={event => handleItemOnChange({ ...item, prot: Number(event.target.value) })}\n            min={0}\n          />\n        ) : (\n          item.prot + ' g'\n        )}\n      </td>\n      <td>\n        {isEditable ? (\n          <Input\n            type=\"number\"\n            value={item.carb}\n            onChange={event => handleItemOnChange({ ...item, carb: Number(event.target.value) })}\n            min={0}\n          />\n        ) : (\n          item.carb + ' g'\n        )}\n      </td>\n      <td>\n        {isEditable ? (\n          <Input\n            type=\"number\"\n            value={item.fat}\n            onChange={event => handleItemOnChange({ ...item, fat: Number(event.target.value) })}\n            min={0}\n          />\n        ) : (\n          item.fat + ' g'\n        )}\n      </td>\n      <td>\n        <Button\n          color={!isEditable ? 'primary' : 'danger'}\n          onClick={!isEditable ? handleOnclickEdit : handleOnclickDone}\n        >\n          {!isEditable ? 'edit' : 'done'}\n        </Button>\n      </td>\n    </tr>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { Button, Col, Container, Row, Table } from 'reactstrap';\nimport { Food } from '../Food/Food';\n\nexport const Meal = ({ title, editable, foods, units }) => {\n  const [_foods, setFoods] = useState(foods);\n  const [totalCarb, setTotalCarb] = useState(0);\n  const [totalCals, setTotalCals] = useState(0);\n  const [totalProt, setTotalProt] = useState(0);\n  const [totalFat, setTotalFat] = useState(0);\n  const [_units, setUnits] = useState(units);\n  const [isEditable, setIsEditable] = useState(editable);\n\n  useEffect(() => {\n    setIsEditable(editable);\n    agg();\n  }, [editable, _foods]);\n\n  const agg = () => {\n    setTotalCals(\n      _foods\n        .map(food => 4 * (food.prot + food.carb) + 9 * food.fat)\n        .reduce((cur, acc) => cur + acc)\n        .toFixed(2),\n    );\n    setTotalProt(\n      _foods\n        .map(food => food.prot)\n        .reduce((cur, acc) => cur + acc)\n        .toFixed(2),\n    );\n    setTotalCarb(\n      _foods\n        .map(food => food.carb)\n        .reduce((cur, acc) => cur + acc)\n        .toFixed(2),\n    );\n    setTotalFat(\n      _foods\n        .map(food => food.fat)\n        .reduce((cur, acc) => cur + acc)\n        .toFixed(2),\n    );\n  };\n\n  const handleOnSave = () => {\n    setIsEditable(false);\n    agg();\n  };\n\n  const handleOnAdd = () => {\n    setFoods([\n      ..._foods,\n      { id: _foods.length + 1, units: _units, portion: 0, prot: 0, carb: 0, fat: 0 },\n    ]);\n  };\n\n  const handleOnDelete = () => {\n    setFoods(_foods.filter(food => food.id !== _foods.length));\n  };\n\n  const handleItemOnChange = item => {\n    setFoods(\n      _foods.map(food => {\n        if (food.id === item.id) {\n          return item;\n        }\n        return food;\n      }),\n    );\n  };\n\n  return (\n    <Container>\n      <Row>\n        <h2>{title}</h2>\n      </Row>\n      <Row>\n        <Table hover>\n          <thead>\n            <tr>\n              <th>#</th>\n              <th>name</th>\n              <th>group</th>\n              <th>portion</th>\n              <th>calories</th>\n              <th>proteins</th>\n              <th>carbohydrates</th>\n              <th>fat</th>\n            </tr>\n          </thead>\n          <tbody>\n            {_foods.map(item => (\n              <Food\n                key={item.id}\n                item={item}\n                editable={isEditable}\n                handleItemOnChange={handleItemOnChange}\n              ></Food>\n            ))}\n          </tbody>\n        </Table>\n      </Row>\n      <Row>\n        <Col>Total Calories: {totalCals}</Col>\n        <Col>Total Proteins: {totalProt}</Col>\n        <Col>Total Carbs: {totalCarb}</Col>\n        <Col>Total Fats: {totalFat}</Col>\n      </Row>\n      <Row>\n        <Col xs={8}>\n          <Button color=\"success\" onClick={handleOnSave}>\n            Save\n          </Button>\n        </Col>\n        <Col xs={4}>\n          <Button color=\"danger\" onClick={handleOnDelete}>\n            -\n          </Button>\n          <Button color=\"primary\" onClick={handleOnAdd}>\n            +\n          </Button>\n        </Col>\n      </Row>\n    </Container>\n  );\n};\n","import React, { useEffect } from 'react';\nimport { Button, Input } from 'reactstrap';\n\nexport const Rep = ({ item, onItemChange }) => {\n  useEffect(() => {\n    Object.keys(item).map(key => console.log(key + ' -> ' + item[key].value));\n  }, []);\n  if (!item.id) console.log(\"Data item must contain 'id' field\");\n  if (!item.editable) return <></>;\n\n  return (\n    <tr>\n      {Object.keys(item).map(key => {\n        console.log(key);\n        console.log(item[key]);\n        if (key === 'id') {\n          return <th scope=\"row\">{item[key].value}</th>;\n        }\n        // if (key === 'editable') {\n        //   return (\n        //     <td>\n        //       <Button\n        //         color={item[key].value ? 'primary' : 'danger'}\n        //         onClick={event => onItemChange({ ...item, key: { value: !item[key].value } })}\n        //       >\n        //         {item[key].value ? 'edit' : 'done'}\n        //       </Button>\n        //     </td>\n        //   );\n        // }\n        if (key){return (\n          <td>\n            {!!item.editable.value ? (\n              <Input\n                type={item[key].type}\n                value={item[key].value}\n                onChange={event =>\n                  onItemChange({\n                    ...item,\n                    key: { value: event.target.value, type: item[key].type },\n                  })\n                }\n              />\n            ) : (\n              item[key].value\n            )}\n          </td>\n        );\n            }\n      })}\n    </tr>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { Button, Col, Container, Row, Table } from 'reactstrap';\nimport { Rep } from '../Repetition/Rep';\n\nexport const Serie = ({ title, data, min, max }) => {\n  const [_data, setData] = useState(data);\n\n  useEffect(() => {\n    setData(\n      _data.map(item => {\n        return { ...item, editable: { value: true } };\n      }),\n    );\n    console.log(_data);\n  }, []);\n\n  const handleOnSave = () => {\n    console.log('saving');\n  };\n\n  const handleOnAdd = () => {\n    if (_data.length < max) {\n      setData([\n        ..._data,\n        { ..._data[_data.length - 1], id: { value: _data.length + 1 }, editable: { value: true } },\n      ]);\n    } else console.log('That is the max!!!');\n  };\n\n  const handleOnDelete = () => {\n    if (_data.length > min) {\n      setData(_data.filter(item => item.id.value !== _data.length));\n    } else console.log('That is the min!!!');\n  };\n\n  const onItemChange = item => {\n    console.log(item);\n    setData(\n      _data.map(serie => {\n        if (serie.id.value === item.id.value) {\n          return item;\n        }\n        return serie;\n      }),\n    );\n  };\n\n  return (\n    <Container>\n      <Row>\n        <h2>{title}</h2>\n      </Row>\n      <Row>\n        <Table>\n          <thead>\n            <tr>\n              {Object.keys(data[0]).map(c => (\n                <th key={c}>{c}</th>\n              ))}\n            </tr>\n          </thead>\n          <tbody>\n            {_data.map(item => (\n              <Rep key={item.id.value} item={item} onItemChange={onItemChange}></Rep>\n            ))}\n          </tbody>\n        </Table>\n      </Row>\n      <Row>\n        <Col xs={8}>\n          <Button color=\"success\" onClick={handleOnSave}>\n            Save\n          </Button>\n        </Col>\n        <Col xs={4}>\n          <Button color=\"danger\" onClick={handleOnDelete}>\n            -\n          </Button>\n          <Button color=\"primary\" onClick={handleOnAdd}>\n            +\n          </Button>\n        </Col>\n      </Row>\n    </Container>\n  );\n};\n"],"mappings":"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","sourceRoot":""}