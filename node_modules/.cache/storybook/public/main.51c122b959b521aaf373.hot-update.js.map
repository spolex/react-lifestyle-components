{"version":3,"file":"main.51c122b959b521aaf373.hot-update.js","sources":["webpack:///./src/components/Food/Food.js","webpack:///./src/components/Meal/Meal.js","webpack:///./src/components/TRow/TRow.js","webpack:///./src/components/TTable/TTable.js","webpack:///./src/components/TTable/index.js","webpack:///./src/stories/Table.stories.jsx"],"sourcesContent":["import React, { useState } from 'react';\nimport { Button, Input } from 'reactstrap';\n\nexport const Food = ({ item, editable, handleItemOnChange }) => {\n  const [isEditable, setIsEditable] = useState(editable);\n  const [isDone, setIsDone] = useState(false);\n\n  const handleOnclickEdit = e => {\n    setIsEditable(true);\n  };\n\n  const handleOnclickDone = e => {\n    setIsEditable(false);\n  };\n\n  return (\n    <tr>\n      <th scope=\"row\">{item.id}</th>\n      <td>\n        {isEditable ? (\n          <Input\n            type=\"text\"\n            value={item.name}\n            onChange={event => handleItemOnChange({ ...item, name: event.target.value })}\n          />\n        ) : (\n          item.name\n        )}{' '}\n      </td>\n      <td>\n        {isEditable ? (\n          <Input\n            type=\"text\"\n            value={item.group}\n            onChange={event => handleItemOnChange({ ...item, group: event.target.value })}\n          />\n        ) : (\n          item.group\n        )}\n      </td>\n      <td>\n        {isEditable ? (\n          <Input\n            type=\"number\"\n            value={item.portion}\n            onChange={event => handleItemOnChange({ ...item, portion: Number(event.target.value) })}\n            min={0}\n          />\n        ) : (\n          item.portion + ' ' + item.units\n        )}\n      </td>\n      <td>{Math.round((item.carb + item.prot) * 4 + item.fat * 9)}</td>\n      <td>\n        {isEditable ? (\n          <Input\n            type=\"number\"\n            value={item.prot}\n            onChange={event => handleItemOnChange({ ...item, prot: Number(event.target.value) })}\n            min={0}\n          />\n        ) : (\n          item.prot + ' g'\n        )}\n      </td>\n      <td>\n        {isEditable ? (\n          <Input\n            type=\"number\"\n            value={item.carb}\n            onChange={event => handleItemOnChange({ ...item, carb: Number(event.target.value) })}\n            min={0}\n          />\n        ) : (\n          item.carb + ' g'\n        )}\n      </td>\n      <td>\n        {isEditable ? (\n          <Input\n            type=\"number\"\n            value={item.fat}\n            onChange={event => handleItemOnChange({ ...item, fat: Number(event.target.value) })}\n            min={0}\n          />\n        ) : (\n          item.fat + ' g'\n        )}\n      </td>\n      <td>\n        <Button\n          color={!isEditable ? 'primary' : 'danger'}\n          onClick={!isEditable ? handleOnclickEdit : handleOnclickDone}\n        >\n          {!isEditable ? 'edit' : 'done'}\n        </Button>\n      </td>\n    </tr>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { Button, Col, Container, Row, Table } from 'reactstrap';\nimport { Food } from '../Food/Food';\n\nexport const Meal = ({ title, editable, foods, units }) => {\n  const [_foods, setFoods] = useState(foods);\n  const [totalCarb, setTotalCarb] = useState(0);\n  const [totalCals, setTotalCals] = useState(0);\n  const [totalProt, setTotalProt] = useState(0);\n  const [totalFat, setTotalFat] = useState(0);\n  const [_units, setUnits] = useState(units);\n  const [isEditable, setIsEditable] = useState(editable);\n\n  useEffect(() => {\n    setIsEditable(editable);\n    agg();\n  }, [editable, _foods]);\n\n  const agg = () => {\n    setTotalCals(\n      _foods\n        .map(food => 4 * (food.prot + food.carb) + 9 * food.fat)\n        .reduce((cur, acc) => cur + acc)\n        .toFixed(2),\n    );\n    setTotalProt(\n      _foods\n        .map(food => food.prot)\n        .reduce((cur, acc) => cur + acc)\n        .toFixed(2),\n    );\n    setTotalCarb(\n      _foods\n        .map(food => food.carb)\n        .reduce((cur, acc) => cur + acc)\n        .toFixed(2),\n    );\n    setTotalFat(\n      _foods\n        .map(food => food.fat)\n        .reduce((cur, acc) => cur + acc)\n        .toFixed(2),\n    );\n  };\n\n  const handleOnSave = () => {\n    setIsEditable(false);\n    agg();\n  };\n\n  const handleOnAdd = () => {\n    setFoods([\n      ..._foods,\n      { id: _foods.length + 1, units: _units, portion: 0, prot: 0, carb: 0, fat: 0 },\n    ]);\n  };\n\n  const handleOnDelete = () => {\n    setFoods(_foods.filter(food => food.id !== _foods.length));\n  };\n\n  const handleItemOnChange = item => {\n    setFoods(\n      _foods.map(food => {\n        if (food.id === item.id) {\n          return item;\n        }\n        return food;\n      }),\n    );\n  };\n\n  return (\n    <Container>\n      <Row>\n        <h2>{title}</h2>\n      </Row>\n      <Row>\n        <Table hover>\n          <thead>\n            <tr>\n              <th>#</th>\n              <th>name</th>\n              <th>group</th>\n              <th>portion</th>\n              <th>calories</th>\n              <th>proteins</th>\n              <th>carbohydrates</th>\n              <th>fat</th>\n            </tr>\n          </thead>\n          <tbody>\n            {_foods.map(item => (\n              <Food\n                key={item.id}\n                item={item}\n                editable={isEditable}\n                handleItemOnChange={handleItemOnChange}\n              ></Food>\n            ))}\n          </tbody>\n        </Table>\n      </Row>\n      <Row>\n        <Col>Total Calories: {totalCals}</Col>\n        <Col>Total Proteins: {totalProt}</Col>\n        <Col>Total Carbs: {totalCarb}</Col>\n        <Col>Total Fats: {totalFat}</Col>\n      </Row>\n      <Row>\n        <Col xs={8}>\n          <Button color=\"success\" onClick={handleOnSave}>\n            Save\n          </Button>\n        </Col>\n        <Col xs={4}>\n          <Button color=\"danger\" onClick={handleOnDelete}>\n            -\n          </Button>\n          <Button color=\"primary\" onClick={handleOnAdd}>\n            +\n          </Button>\n        </Col>\n      </Row>\n    </Container>\n  );\n};\n","import React, { useEffect } from 'react';\nimport { Button, Input } from 'reactstrap';\n\nexport const TRow = ({ item, onItemChange }) => {\n  if (!item.id) return <></>;\n  if (!item.editable) return <></>;\n\n  useEffect(() => {\n    Object.keys(item).map(key => console.log(key + ' -> ' + item[key].value));\n  }, []);\n\n  return (\n    <tr>\n      {Object.keys(item).map(key => {\n        if (key === 'id') {\n          return (\n            <th key={key} scope=\"row\">\n              {item[key].value}\n            </th>\n          );\n        }\n        if (key === 'editable') {\n          return (\n            <td key={key}>\n              <Button\n                color={item[key].value ? 'primary' : 'danger'}\n                onClick={event => onItemChange({ ...item, [key]: { value: !item[key].value } })}\n              >\n                {item[key].value ? 'edit' : 'done'}\n              </Button>\n            </td>\n          );\n        } else {\n          return (\n            <td key={key}>\n              {!!item.editable.value ? (\n                <Input\n                  type={item[key].type}\n                  value={item[key].value}\n                  onChange={event => {\n                    console.log(item);\n                    onItemChange({\n                      ...item,\n                      [key]: { value: event.target.value, type: item[key].type },\n                    });\n                    console.log(item);\n                  }}\n                />\n              ) : (\n                item[key].value\n              )}\n            </td>\n          );\n        }\n      })}\n    </tr>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { Button, Col, Container, Row, Table } from 'reactstrap';\nimport { TRow } from '../TRow/TRow';\n\nexport const TTable = ({ title, data, min, max }) => {\n  const [_data, setData] = useState(data);\n\n  useEffect(() => {\n    setData(\n      _data.map(item => {\n        return { ...item, editable: { value: true } };\n      }),\n    );\n  }, []);\n\n  const handleOnSave = () => {\n    console.log('saving');\n  };\n\n  const handleOnAdd = () => {\n    if (_data.length < max) {\n      setData([\n        ..._data,\n        { ..._data[_data.length - 1], id: { value: _data.length + 1 }, editable: { value: true } },\n      ]);\n    } else console.log('That is the max!!!');\n  };\n\n  const handleOnDelete = () => {\n    if (_data.length > min) {\n      setData(_data.filter(item => item.id.value !== _data.length));\n    } else console.log('That is the min!!!');\n  };\n\n  const onItemChange = item => {\n    console.log(item);\n    setData(\n      _data.map(serie => {\n        if (serie.id.value === item.id.value) {\n          return item;\n        }\n        return serie;\n      }),\n    );\n  };\n\n  return (\n    <Container>\n      <Row>\n        <h2>{title}</h2>\n      </Row>\n      <Row>\n        <Table>\n          <thead>\n            <tr>\n              {Object.keys(data[0]).map(c => (\n                <th key={c}>{c}</th>\n              ))}\n            </tr>\n          </thead>\n          <tbody>\n            {_data.map(item => (\n              <TRow key={item.id.value} item={item} onItemChange={onItemChange}></TRow>\n            ))}\n          </tbody>\n        </Table>\n      </Row>\n      <Row>\n        <Col xs={8}>\n          <Button color=\"success\" onClick={handleOnSave}>\n            Save\n          </Button>\n        </Col>\n        <Col xs={4}>\n          <Button color=\"danger\" onClick={handleOnDelete}>\n            -\n          </Button>\n          <Button color=\"primary\" onClick={handleOnAdd}>\n            +\n          </Button>\n        </Col>\n      </Row>\n    </Container>\n  );\n};\n","export * from './TTable';\n","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import 'bootstrap/dist/css/bootstrap.min.css';\\nimport { TTable } from '../components/TTable';\\n\\nexport default {\\n  title: 'WORKOUT/Series',\\n  component: TTable,\\n};\\n\\nexport const Monday = TTable.bind({});\\nMonday.args = {\\n  title: 'Curl biceps',\\n  muscleGroup: 'Biceps',\\n  data: [\\n    {\\n      id: { value: 1 },\\n      num: { value: 15, type: 'number' },\\n      weigth: { value: 100, type: 'number' },\\n    },\\n    {\\n      id: { value: 2 },\\n      num: { value: 10, type: 'number' },\\n      weigth: { value: 8, type: 'number' },\\n    },\\n  ],\\n  min: 2,\\n  max: 5,\\n};\\n\\nexport const Breakfast = TTable.bind({});\\n\\nBreakfast.args = {\\n  title: 'Meal1',\\n  units: 'g',\\n  data: [\\n    {\\n      id: { value: 1 },\\n      name: {value: 'Banana', type:\\\"text\\\"},\\n      group: 'Fruits',\\n      portion: { value: 100, type: 'number' },\\n      units: { value: 'g', editable: false },\\n\\n      prot: 0.73,\\n      carb: 20.1,\\n      fat: 0.22,\\n    },\\n    {\\n      id: 2,\\n      portion: 100,\\n      units: 'g',\\n      name: 'Chicken',\\n      group: 'Poultry',\\n      prot: 32.11,\\n      carb: 20.1,\\n      fat: 3.24,\\n    },\\n  ],\\n  min: 1,\\n  max: 10,\\n};\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"Monday\":{\"startLoc\":{\"col\":22,\"line\":9},\"endLoc\":{\"col\":37,\"line\":9},\"startBody\":{\"col\":22,\"line\":9},\"endBody\":{\"col\":37,\"line\":9}},\"Breakfast\":{\"startLoc\":{\"col\":25,\"line\":29},\"endLoc\":{\"col\":40,\"line\":29},\"startBody\":{\"col\":25,\"line\":29},\"endBody\":{\"col\":40,\"line\":29}}};\n    \nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { TTable } from '../components/TTable';\n\nexport default {\n  title: 'WORKOUT/Series',\n  component: TTable,\n};\n\nexport const Monday = TTable.bind({});;\nMonday.args = {\n  title: 'Curl biceps',\n  muscleGroup: 'Biceps',\n  data: [\n    {\n      id: { value: 1 },\n      num: { value: 15, type: 'number' },\n      weigth: { value: 100, type: 'number' },\n    },\n    {\n      id: { value: 2 },\n      num: { value: 10, type: 'number' },\n      weigth: { value: 8, type: 'number' },\n    },\n  ],\n  min: 2,\n  max: 5,\n};\n\nexport const Breakfast = TTable.bind({});\n\nBreakfast.args = {\n  title: 'Meal1',\n  units: 'g',\n  data: [\n    {\n      id: { value: 1 },\n      name: {value: 'Banana', type:\"text\"},\n      group: 'Fruits',\n      portion: { value: 100, type: 'number' },\n      units: { value: 'g', editable: false },\n\n      prot: 0.73,\n      carb: 20.1,\n      fat: 0.22,\n    },\n    {\n      id: 2,\n      portion: 100,\n      units: 'g',\n      name: 'Chicken',\n      group: 'Poultry',\n      prot: 32.11,\n      carb: 20.1,\n      fat: 3.24,\n    },\n  ],\n  min: 1,\n  max: 10,\n};\n\n\n\nMonday.parameters = { storySource: { source: \"TTable.bind({})\" }, ...Monday.parameters };\nBreakfast.parameters = { storySource: { source: \"TTable.bind({})\" }, ...Breakfast.parameters };"],"mappings":"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","sourceRoot":""}