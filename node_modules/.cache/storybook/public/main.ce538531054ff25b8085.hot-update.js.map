{"version":3,"file":"main.ce538531054ff25b8085.hot-update.js","sources":["webpack:///./src/stories/Table.stories.jsx"],"sourcesContent":["\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import 'bootstrap/dist/css/bootstrap.min.css';\\nimport { useEffect, useState } from 'react';\\nimport { Table } from '../components/Table';\\nimport moment from 'moment';\\n\\nexport default {\\n  title: 'COMPONENTS/Table',\\n  component: Table,\\n};\\n\\nexport const WorkOut = args => {\\n  const [_data, setData] = useState(args.dataset);\\n  const [_metadata, setMetadata] = useState(args.metadata);\\n  const [min, setMin] = useState(args.min);\\n  const [max, setMax] = useState(args.max);\\n\\n  useEffect(() => {}, [_data]);\\n\\n  const onItemChange = udpatedItem => {\\n    console.log('Itemmmmmmmm is changing!!!');\\n    console.log(udpatedItem);\\n    setData(\\n      _data.map(item => {\\n        if (item.id === udpatedItem.id) {\\n          return udpatedItem;\\n        }\\n        return item;\\n      }),\\n    );\\n  };\\n\\n  const handleOnAdd = () => {\\n    if (_data.length < max) {\\n      console.log('Adding row!!!');\\n      var newItem = {};\\n      Object.keys(_metadata).map(key => {\\n        if (key === 'id') newItem[key] = _data.length + 1;\\n        else newItem[key] = _metadata[key].default;\\n      });\\n      setData([..._data, newItem]);\\n    } else console.log('That is the max!!!');\\n  };\\n\\n  const handleOnDelete = () => {\\n    if (_data.length > min) {\\n      console.log('We are deleting data');\\n      setData(_data.filter(item => item.id !== _data.length));\\n    } else console.log('That is the min!!!');\\n  };\\n\\n  return (\\n    <Table\\n      onItemChange={onItemChange}\\n      data={_data}\\n      metadata={_metadata}\\n      handleOnAdd={handleOnAdd}\\n      handleOnDelete={handleOnDelete}\\n      handleOnSave={args.handleOnSave}\\n      {...args}\\n    />\\n  );\\n};\\n\\nWorkOut.args = {\\n  title: 'Curl biceps',\\n  muscleGroup: 'Biceps',\\n  dataset: [\\n    { id: 1, date: '2022-11-23', repetitions: 15, weigth: 100 },\\n    { id: 2, date: '2022-11-23', repetitions: 10, weigth: 18 },\\n  ],\\n  metadata: {\\n    id: { name: 'id', type: 'text' },\\n    date: {\\n      name: 'date',\\n      type: 'date',\\n      default: moment(new Date()).format('YYYY-MM-DD'),\\n    },\\n    repetitions: { name: 'repetitions', type: 'number', default: 10 },\\n    weigth: { name: 'weigth', type: 'number', default: 50 },\\n  },\\n  max: 6,\\n  min: 1,\\n  handleOnSave: data => {\\n    console.log('Saving data!!!!');\\n    console.log(data);\\n  },\\n};\\n\\n// export const Breakfast = Table.bind({});\\n\\n// Breakfast.args = {\\n//   title: 'Meal1',\\n//   data: [\\n//     {\\n//       id: { value: 1 },\\n//       name: { value: 'Banana', type: 'text' },\\n//       group: { value: 'Fruits', type: 'text' },\\n//       portion: { value: 100, type: 'number' },\\n//       units: { value: 'g', editable: false },\\n//       prot: { value: 0.73, type: 'number' },\\n//       carb: { value: 20.1, type: 'number' },\\n//       fat: { value: 0.22, type: 'number' },\\n//     },\\n//     {\\n//       id: { value: 2 },\\n//       name: { value: 'Chicken', type: 'text' },\\n//       group: { value: 'Poultry', type: 'text' },\\n//       portion: { value: 100, type: 'number' },\\n//       units: { value: 'g', editable: false },\\n//       prot: { value: 32.11, type: 'number' },\\n//       carb: { value: 20.1, type: 'number' },\\n//       fat: { value: 3.24, type: 'number' },\\n//     },\\n//   ],\\n//   max: 5,\\n//   min: 1,\\n//   handleOnSave: data => {\\n//     console.log('saving');\\n//     console.log(data);\\n//   },\\n// };\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"WorkOut\":{\"startLoc\":{\"col\":23,\"line\":11},\"endLoc\":{\"col\":1,\"line\":62},\"startBody\":{\"col\":23,\"line\":11},\"endBody\":{\"col\":1,\"line\":62}}};\n    \nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { useEffect, useState } from 'react';\nimport { Table } from '../components/Table';\nimport moment from 'moment';\n\nexport default {\n  title: 'COMPONENTS/Table',\n  component: Table,\n};\n\nexport const WorkOut = args => {\n  const [_data, setData] = useState(args.dataset);\n  const [_metadata, setMetadata] = useState(args.metadata);\n  const [min, setMin] = useState(args.min);\n  const [max, setMax] = useState(args.max);\n\n  useEffect(() => {}, [_data]);\n\n  const onItemChange = udpatedItem => {\n    console.log('Itemmmmmmmm is changing!!!');\n    console.log(udpatedItem);\n    setData(\n      _data.map(item => {\n        if (item.id === udpatedItem.id) {\n          return udpatedItem;\n        }\n        return item;\n      }),\n    );\n  };\n\n  const handleOnAdd = () => {\n    if (_data.length < max) {\n      console.log('Adding row!!!');\n      var newItem = {};\n      Object.keys(_metadata).map(key => {\n        if (key === 'id') newItem[key] = _data.length + 1;\n        else newItem[key] = _metadata[key].default;\n      });\n      setData([..._data, newItem]);\n    } else console.log('That is the max!!!');\n  };\n\n  const handleOnDelete = () => {\n    if (_data.length > min) {\n      console.log('We are deleting data');\n      setData(_data.filter(item => item.id !== _data.length));\n    } else console.log('That is the min!!!');\n  };\n\n  return (\n    <Table\n      onItemChange={onItemChange}\n      data={_data}\n      metadata={_metadata}\n      handleOnAdd={handleOnAdd}\n      handleOnDelete={handleOnDelete}\n      handleOnSave={args.handleOnSave}\n      {...args}\n    />\n  );\n};\n\nWorkOut.args = {\n  title: 'Curl biceps',\n  muscleGroup: 'Biceps',\n  dataset: [\n    { id: 1, date: '2022-11-23', repetitions: 15, weigth: 100 },\n    { id: 2, date: '2022-11-23', repetitions: 10, weigth: 18 },\n  ],\n  metadata: {\n    id: { name: 'id', type: 'text' },\n    date: {\n      name: 'date',\n      type: 'date',\n      default: moment(new Date()).format('YYYY-MM-DD'),\n    },\n    repetitions: { name: 'repetitions', type: 'number', default: 10 },\n    weigth: { name: 'weigth', type: 'number', default: 50 },\n  },\n  max: 6,\n  min: 1,\n  handleOnSave: data => {\n    console.log('Saving data!!!!');\n    console.log(data);\n  },\n};\n\n// export const Breakfast = Table.bind({});\n\n// Breakfast.args = {\n//   title: 'Meal1',\n//   data: [\n//     {\n//       id: { value: 1 },\n//       name: { value: 'Banana', type: 'text' },\n//       group: { value: 'Fruits', type: 'text' },\n//       portion: { value: 100, type: 'number' },\n//       units: { value: 'g', editable: false },\n//       prot: { value: 0.73, type: 'number' },\n//       carb: { value: 20.1, type: 'number' },\n//       fat: { value: 0.22, type: 'number' },\n//     },\n//     {\n//       id: { value: 2 },\n//       name: { value: 'Chicken', type: 'text' },\n//       group: { value: 'Poultry', type: 'text' },\n//       portion: { value: 100, type: 'number' },\n//       units: { value: 'g', editable: false },\n//       prot: { value: 32.11, type: 'number' },\n//       carb: { value: 20.1, type: 'number' },\n//       fat: { value: 3.24, type: 'number' },\n//     },\n//   ],\n//   max: 5,\n//   min: 1,\n//   handleOnSave: data => {\n//     console.log('saving');\n//     console.log(data);\n//   },\n// };\n\n\n\nWorkOut.parameters = { storySource: { source: \"args => {\\n  const [_data, setData] = useState(args.dataset);\\n  const [_metadata, setMetadata] = useState(args.metadata);\\n  const [min, setMin] = useState(args.min);\\n  const [max, setMax] = useState(args.max);\\n\\n  useEffect(() => {}, [_data]);\\n\\n  const onItemChange = udpatedItem => {\\n    console.log('Itemmmmmmmm is changing!!!');\\n    console.log(udpatedItem);\\n    setData(\\n      _data.map(item => {\\n        if (item.id === udpatedItem.id) {\\n          return udpatedItem;\\n        }\\n        return item;\\n      }),\\n    );\\n  };\\n\\n  const handleOnAdd = () => {\\n    if (_data.length < max) {\\n      console.log('Adding row!!!');\\n      var newItem = {};\\n      Object.keys(_metadata).map(key => {\\n        if (key === 'id') newItem[key] = _data.length + 1;\\n        else newItem[key] = _metadata[key].default;\\n      });\\n      setData([..._data, newItem]);\\n    } else console.log('That is the max!!!');\\n  };\\n\\n  const handleOnDelete = () => {\\n    if (_data.length > min) {\\n      console.log('We are deleting data');\\n      setData(_data.filter(item => item.id !== _data.length));\\n    } else console.log('That is the min!!!');\\n  };\\n\\n  return (\\n    <Table\\n      onItemChange={onItemChange}\\n      data={_data}\\n      metadata={_metadata}\\n      handleOnAdd={handleOnAdd}\\n      handleOnDelete={handleOnDelete}\\n      handleOnSave={args.handleOnSave}\\n      {...args}\\n    />\\n  );\\n}\" }, ...WorkOut.parameters };"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAFA;AAKA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AANA;AAUA;AAnDA;AAqDA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAHA;AAKA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AARA;AAUA;AACA;AACA;AACA;AACA;AACA;AAtBA;AA2BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;A","sourceRoot":""}