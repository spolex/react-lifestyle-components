{"version":3,"file":"main.0ec0b7ac42d7e6d5d6e4.hot-update.js","sources":["webpack:///./src/components/Button/Button.js","webpack:///./src/components/Row/Row.js","webpack:///./src/components/Table/Table.js","webpack:///./src/stories/Button.stories.jsx","webpack:///./src/stories/Table.stories.jsx"],"sourcesContent":["import React from 'react';\n\nexport const Button = ({ onClick, children, color, type = 'button' }) => {\n  return (\n    <button type={type} onClick={onClick} className={'btn btn-'.concat(color)}>\n      {children}\n    </button>\n  );\n};\n","import React, { useEffect } from 'react';\nimport { Button } from '../Button';\n\nexport const Row = ({ item, onItemChange }) => {\n  return (\n    <tr>\n      <th key={item.id} scope=\"row\">\n        {item.id.value}\n      </th>\n      {/* {item.map((field, index) => (\n        <td>\n          <input\n            className=\"form-control\"\n            value={field}\n            type={schema[index + 1].type}\n            onChange={event => {\n              console.log(item);\n              onItemChange(event.target.value, index + 1);\n              console.log(item);\n            }}\n          />\n        </td>\n      ))} */}\n    </tr>\n    // <tr>\n    //   {Object.keys(item).map(key => {\n    //     if (key === 'id') {\n    //       return (\n    //         <th key={key} scope=\"row\">\n    //           {item[key].value}\n    //         </th>\n    //       );\n    //     }\n    //     if (key === 'editable') {\n    //       return (\n    //         <td key={key}>\n    //           <Button\n    //             color={!item[key].value ? 'primary' : 'danger'}\n    //             onClick={event => onItemChange({ ...item, [key]: { value: !item[key].value } })}\n    //           >\n    //             {!item[key].value ? 'edit' : 'done'}\n    //           </Button>\n    //         </td>\n    //       );\n    //     } else {\n    //       return (\n    //         <td key={key}>\n    //           {!!item.editable.value ? (\n    //             <input\n    //               className=\"form-control\"\n    //               type={item[key].type}\n    //               value={item[key].value}\n    //               onChange={event => {\n    //                 console.log(item);\n    //                 onItemChange({\n    //                   ...item,\n    //                   [key]: { value: event.target.value, type: item[key].type },\n    //                 });\n    //                 console.log(item);\n    //               }}\n    //             />\n    //           ) : (\n    //             item[key].value\n    //           )}\n    //         </td>\n    //       );\n    //     }\n    //   })}\n    // </tr>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { Button } from '../Button';\nimport { Row } from '../Row/Row';\n\nexport const Table = ({ title, schema, data, min, max, handleOnSave }) => {\n  useEffect(() => {}, []);\n\n  const handleOnAdd = () => {\n    if (_data.length < max) {\n      console.log('Adding row!!!');\n      // setData([\n      //   ..._data,\n      //   { ..._data[_data.length - 1], id: { value: _data.length + 1 }, editable: { value: true } },\n      // ]);\n    } else console.log('That is the max!!!');\n  };\n\n  const handleOnDelete = () => {\n    if (_data.length > min) {\n      console.log('We are deleting data');\n      //setData(_data.filter(item => item.id.value !== _data.length));\n    } else console.log('That is the min!!!');\n  };\n\n  const onItemChange = item => {\n    console.log(item);\n    // setData(\n    //   _data.map(serie => {\n    //     if (serie.id.value === item.id.value) {\n    //       return item;\n    //     }\n    //     return serie;\n    //   }),\n    // );\n  };\n\n  return (\n    <div>\n      <div>\n        <h2>{title}</h2>\n      </div>\n      <table className=\"table table-hover\">\n        <thead>\n          <tr>\n            {schema.map(col => (\n              <th key={col.name} scope=\"col\">\n                {col.name}\n              </th>\n            ))}\n          </tr>\n        </thead>\n        <tbody>\n          {data.map(item => (\n            <Row key={item.id.value} item={item} onItemChange={onItemChange}></Row>\n          ))}\n        </tbody>\n      </table>\n      <div className=\"row\">\n        <div className=\"col-10\">\n          <Button color=\"success\" onClick={e => handleOnSave(_data)}>\n            Submit\n          </Button>\n        </div>\n        <div className=\"col-2\">\n          <Button color=\"danger\" onClick={handleOnDelete}>\n            -\n          </Button>\n          <Button color=\"primary\" onClick={handleOnAdd}>\n            +\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n};\n","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import 'bootstrap/dist/css/bootstrap.min.css';\\nimport { Button } from '../components/Button';\\n\\nexport default {\\n  title: 'COMPONENTS/Button',\\n  component: Button,\\n};\\n\\nconst Template = args => <Button {...args}>Click me</Button>;\\n\\n//ðŸ‘‡ Each story then reuses that template\\nexport const Primary = Template.bind({});\\nPrimary.args = {\\n  color: 'primary',\\n  label: 'Button',\\n  onClick: () => console.log('You clicked on the primary button!'),\\n};\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"Primary\":{\"startLoc\":{\"col\":17,\"line\":9},\"endLoc\":{\"col\":60,\"line\":9},\"startBody\":{\"col\":17,\"line\":9},\"endBody\":{\"col\":60,\"line\":9}}};\n    \nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Button } from '../components/Button';\n\nexport default {\n  title: 'COMPONENTS/Button',\n  component: Button,\n};\n\nconst Template = args => <Button {...args}>Click me</Button>;\n\n//ðŸ‘‡ Each story then reuses that template\nexport const Primary = Template.bind({});\nPrimary.args = {\n  color: 'primary',\n  label: 'Button',\n  onClick: () => console.log('You clicked on the primary button!'),\n};\n\n\n\nPrimary.parameters = { storySource: { source: \"args => <Button {...args}>Click me</Button>\" }, ...Primary.parameters };","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import 'bootstrap/dist/css/bootstrap.min.css';\\nimport { useEffect, useState } from 'react';\\nimport { Table } from '../components/Table';\\n\\nexport default {\\n  title: 'WORKOUT/Series',\\n  component: Table,\\n};\\n\\nexport const Template = args => {\\n  const [_data, setData] = useState([]);\\n  const [_schema, setSchema] = useState([]);\\n  useEffect(() => {\\n    setData([\\n      { id: 1, date: '2022-11-23', repetitions: 15, weight: 100 },\\n      { id: 2, date: '2022-11-23', repetitions: 10, weight: 18 },\\n    ]);\\n    setSchema([\\n      { name: 'id', type: 'text' },\\n      { name: 'date', type: 'date' },\\n      { name: 'repetitions', type: 'number' },\\n      { name: 'weight', type: 'number' },\\n    ]);\\n  }, []);\\n  const onItemChange = item => {\\n    console.log(item);\\n  };\\n\\n  return <Table onItemChange={onItemChange} data={_data} schema={_schema} {...args} />;\\n};\\n\\nexport const Monday = Template.bind({});\\nMonday.args = {\\n  title: 'Curl biceps',\\n  muscleGroup: 'Biceps',\\n  max: 5,\\n  min: 1,\\n  handleOnSave: data => {\\n    console.log('saving');\\n    console.log(data);\\n  },\\n};\\n\\n// export const Breakfast = Table.bind({});\\n\\n// Breakfast.args = {\\n//   title: 'Meal1',\\n//   data: [\\n//     {\\n//       id: { value: 1 },\\n//       name: { value: 'Banana', type: 'text' },\\n//       group: { value: 'Fruits', type: 'text' },\\n//       portion: { value: 100, type: 'number' },\\n//       units: { value: 'g', editable: false },\\n//       prot: { value: 0.73, type: 'number' },\\n//       carb: { value: 20.1, type: 'number' },\\n//       fat: { value: 0.22, type: 'number' },\\n//     },\\n//     {\\n//       id: { value: 2 },\\n//       name: { value: 'Chicken', type: 'text' },\\n//       group: { value: 'Poultry', type: 'text' },\\n//       portion: { value: 100, type: 'number' },\\n//       units: { value: 'g', editable: false },\\n//       prot: { value: 32.11, type: 'number' },\\n//       carb: { value: 20.1, type: 'number' },\\n//       fat: { value: 3.24, type: 'number' },\\n//     },\\n//   ],\\n//   max: 5,\\n//   min: 1,\\n//   handleOnSave: data => {\\n//     console.log('saving');\\n//     console.log(data);\\n//   },\\n// };\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"Template\":{\"startLoc\":{\"col\":24,\"line\":10},\"endLoc\":{\"col\":1,\"line\":30},\"startBody\":{\"col\":24,\"line\":10},\"endBody\":{\"col\":1,\"line\":30}},\"Monday\":{\"startLoc\":{\"col\":24,\"line\":10},\"endLoc\":{\"col\":1,\"line\":30},\"startBody\":{\"col\":24,\"line\":10},\"endBody\":{\"col\":1,\"line\":30}}};\n    \nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { useEffect, useState } from 'react';\nimport { Table } from '../components/Table';\n\nexport default {\n  title: 'WORKOUT/Series',\n  component: Table,\n};\n\nexport const Template = args => {\n  const [_data, setData] = useState([]);\n  const [_schema, setSchema] = useState([]);\n  useEffect(() => {\n    setData([\n      { id: 1, date: '2022-11-23', repetitions: 15, weight: 100 },\n      { id: 2, date: '2022-11-23', repetitions: 10, weight: 18 },\n    ]);\n    setSchema([\n      { name: 'id', type: 'text' },\n      { name: 'date', type: 'date' },\n      { name: 'repetitions', type: 'number' },\n      { name: 'weight', type: 'number' },\n    ]);\n  }, []);\n  const onItemChange = item => {\n    console.log(item);\n  };\n\n  return <Table onItemChange={onItemChange} data={_data} schema={_schema} {...args} />;\n};;\n\nexport const Monday = Template.bind({});\nMonday.args = {\n  title: 'Curl biceps',\n  muscleGroup: 'Biceps',\n  max: 5,\n  min: 1,\n  handleOnSave: data => {\n    console.log('saving');\n    console.log(data);\n  },\n};\n\n// export const Breakfast = Table.bind({});\n\n// Breakfast.args = {\n//   title: 'Meal1',\n//   data: [\n//     {\n//       id: { value: 1 },\n//       name: { value: 'Banana', type: 'text' },\n//       group: { value: 'Fruits', type: 'text' },\n//       portion: { value: 100, type: 'number' },\n//       units: { value: 'g', editable: false },\n//       prot: { value: 0.73, type: 'number' },\n//       carb: { value: 20.1, type: 'number' },\n//       fat: { value: 0.22, type: 'number' },\n//     },\n//     {\n//       id: { value: 2 },\n//       name: { value: 'Chicken', type: 'text' },\n//       group: { value: 'Poultry', type: 'text' },\n//       portion: { value: 100, type: 'number' },\n//       units: { value: 'g', editable: false },\n//       prot: { value: 32.11, type: 'number' },\n//       carb: { value: 20.1, type: 'number' },\n//       fat: { value: 3.24, type: 'number' },\n//     },\n//   ],\n//   max: 5,\n//   min: 1,\n//   handleOnSave: data => {\n//     console.log('saving');\n//     console.log(data);\n//   },\n// };\n\n\n\nTemplate.parameters = { storySource: { source: \"args => {\\n  const [_data, setData] = useState([]);\\n  const [_schema, setSchema] = useState([]);\\n  useEffect(() => {\\n    setData([\\n      { id: 1, date: '2022-11-23', repetitions: 15, weight: 100 },\\n      { id: 2, date: '2022-11-23', repetitions: 10, weight: 18 },\\n    ]);\\n    setSchema([\\n      { name: 'id', type: 'text' },\\n      { name: 'date', type: 'date' },\\n      { name: 'repetitions', type: 'number' },\\n      { name: 'weight', type: 'number' },\\n    ]);\\n  }, []);\\n  const onItemChange = item => {\\n    console.log(item);\\n  };\\n\\n  return <Table onItemChange={onItemChange} data={_data} schema={_schema} {...args} />;\\n}\" }, ...Template.parameters };\nMonday.parameters = { storySource: { source: \"args => {\\n  const [_data, setData] = useState([]);\\n  const [_schema, setSchema] = useState([]);\\n  useEffect(() => {\\n    setData([\\n      { id: 1, date: '2022-11-23', repetitions: 15, weight: 100 },\\n      { id: 2, date: '2022-11-23', repetitions: 10, weight: 18 },\\n    ]);\\n    setSchema([\\n      { name: 'id', type: 'text' },\\n      { name: 'date', type: 'date' },\\n      { name: 'repetitions', type: 'number' },\\n      { name: 'weight', type: 'number' },\\n    ]);\\n  }, []);\\n  const onItemChange = item => {\\n    console.log(item);\\n  };\\n\\n  return <Table onItemChange={onItemChange} data={_data} schema={_schema} {...args} />;\\n}\" }, ...Monday.parameters };"],"mappings":";;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAIA;AANA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;AAEA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AADA;AAoBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAhEA;AAkEA;AAnEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACHA;AACA;AACA;;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AADA;AAGA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AADA;AADA;AADA;AASA;AACA;AACA;AAAA;AAAA;AADA;AADA;AAVA;AAgBA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAKA;AAAA;AACA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAJA;AANA;AApBA;AAqCA;AAtEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACHA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;;AAEA;AACA;AACA;AAFA;AACA;AAIA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAHA;AAQA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC3BA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;;AAEA;AACA;AACA;AAFA;AAKA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AApBA;AAoBA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;A","sourceRoot":""}