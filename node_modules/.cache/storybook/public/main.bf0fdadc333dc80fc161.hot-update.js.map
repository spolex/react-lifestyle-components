{"version":3,"file":"main.bf0fdadc333dc80fc161.hot-update.js","sources":["webpack:///./src/components/BarchartD3/BarchartD3.js","webpack:///./src/components/BarchartD3/index.js","webpack:///./src/hooks/index.js","webpack:///./src/hooks/useD3.js","webpack:///./src/stories/DTD3.stories.jsx"],"sourcesContent":["import * as d3 from 'd3';\nimport React from 'react';\nimport { useD3 } from '../../hooks';\n\nexport const BarChartD3 = ({ data }) => {\n  const ref = useD3(\n    svg => {\n      const height = 500;\n      const width = 500;\n      const margin = { top: 20, right: 30, bottom: 30, left: 40 };\n\n      const x = d3\n        .scaleBand()\n        .domain(data.map(d => d.year))\n        .rangeRound([margin.left, width - margin.right])\n        .padding(0.1);\n\n      const y1 = d3\n        .scaleLinear()\n        .domain([0, d3.max(data, d => d.sales)])\n        .rangeRound([height - margin.bottom, margin.top]);\n\n      const xAxis = g =>\n        g.attr('transform', `translate(0,${height - margin.bottom})`).call(\n          d3\n            .axisBottom(x)\n            .tickValues(\n              d3.ticks(...d3.extent(x.domain()), width / 40).filter(v => x(v) !== undefined),\n            )\n            .tickSizeOuter(0),\n        );\n\n      const y1Axis = g =>\n        g\n          .attr('transform', `translate(${margin.left},0)`)\n          .style('color', 'steelblue')\n          .call(d3.axisLeft(y1).ticks(null, 's'))\n          .call(g => g.select('.domain').remove())\n          .call(g =>\n            g\n              .append('text')\n              .attr('x', -margin.left)\n              .attr('y', 10)\n              .attr('fill', 'currentColor')\n              .attr('text-anchor', 'start')\n              .text(data.y1),\n          );\n\n      svg.select('.x-axis').call(xAxis);\n      svg.select('.y-axis').call(y1Axis);\n\n      svg\n        .select('.plot-area')\n        .attr('fill', 'steelblue')\n        .selectAll('.bar')\n        .data(data)\n        .join('rect')\n        .attr('class', 'bar')\n        .attr('x', d => x(d.year))\n        .attr('width', x.bandwidth())\n        .attr('y', d => y1(d.sales))\n        .attr('height', d => y1(0) - y1(d.sales));\n    },\n    [data.length],\n  );\n\n  return (\n    <svg\n      ref={ref}\n      style={{\n        height: 500,\n        width: '100%',\n        marginRight: '0px',\n        marginLeft: '0px',\n      }}\n    >\n      <g className=\"plot-area\" />\n      <g className=\"x-axis\" />\n      <g className=\"y-axis\" />\n    </svg>\n  );\n};\n","export * from './BarchartD3';\n","export * from './useD3';\n","import React from 'react';\nimport * as d3 from 'd3';\n\nexport const useD3 = (renderChartFn, dependencies) => {\n  const ref = React.useRef();\n\n  React.useEffect(() => {\n    renderChartFn(d3.select(ref.current));\n    return () => {};\n  }, dependencies);\n  return ref;\n};\n","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import React from 'react';\\nimport { Container, Row } from 'reactstrap';\\nimport { BarChartD3 } from '../components/BarchartD3';\\n\\nexport default {\\n  /* ğŸ‘‡ The title prop is optional.\\n   * See https://storybook.js.org/docs/react/configure/overview#configure-story-loading\\n   * to learn how to generate automatic titles\\n   */\\n  title: 'DTD3 story',\\n  component: BarChartD3,\\n};\\n\\nconst data = [\\n  {\\n    client: 'Itau',\\n    past: 150,\\n    actual: 165,\\n  },\\n  {\\n    client: 'Santander',\\n    past: 210,\\n    actual: 190,\\n  },\\n  {\\n    client: 'Avangrid',\\n    past: 222,\\n    actual: 270,\\n  },\\n  {\\n    client: 'IDB Invest',\\n    past: 222,\\n    actual: 270,\\n  },\\n  {\\n    client: 'United Nations',\\n    past: 200,\\n    actual: 235,\\n  },\\n  //   {\\n  //     client: 'September',\\n  //     past: 280,\\n  //     actual: 330,\\n  //   },\\n  //   {\\n  //     client: 'October',\\n  //     past: 330,\\n  //     actual: 370,\\n  //   },\\n  //   {\\n  //     client: 'November',\\n  //     past: 370,\\n  //     actual: 190,\\n  //   },BarchartD3\\n  //   {\\n  //     client: 'December',\\n  //     past: 350,\\n  //     actual: 190,\\n  //   },\\n  //   {\\n  //     client: 'January',\\n  //     past: 410,\\n  //     actual: 190,\\n  //   },\\n  //   {\\n  //     client: 'February',\\n  //     past: 415,\\n  //     actual: 190,\\n  //   },\\n  //   {\\n  //     client: 'March',\\n  //     past: 475,\\n  //     actual: 190,\\n  //   },\\n];\\n\\nconst data1 = [\\n  { year: 1980, efficiency: 24.3, sales: 8949000 },\\n  { year: 1985, efficiency: 27.6, sales: 10979000 },\\n  { year: 1990, efficiency: 28, sales: 9303000 },\\n  { year: 1991, efficiency: 28.4, sales: 8185000 },\\n  { year: 1992, efficiency: 27.9, sales: 8213000 },\\n  { year: 1993, efficiency: 28.4, sales: 8518000 },\\n  { year: 1994, efficiency: 28.3, sales: 8991000 },\\n  { year: 1995, efficiency: 28.6, sales: 8620000 },\\n  { year: 1996, efficiency: 28.5, sales: 8479000 },\\n  { year: 1997, efficiency: 28.7, sales: 8217000 },\\n  { year: 1998, efficiency: 28.8, sales: 8085000 },\\n  { year: 1999, efficiency: 28.3, sales: 8638000 },\\n  { year: 2000, efficiency: 28.5, sales: 8778000 },\\n  { year: 2001, efficiency: 28.8, sales: 8352000 },\\n  { year: 2002, efficiency: 29, sales: 8042000 },\\n  { year: 2003, efficiency: 29.5, sales: 7556000 },\\n  { year: 2004, efficiency: 29.5, sales: 7483000 },\\n  { year: 2005, efficiency: 30.3, sales: 7660000 },\\n  { year: 2006, efficiency: 30.1, sales: 7762000 },\\n  { year: 2007, efficiency: 31.2, sales: 7562000 },\\n  { year: 2008, efficiency: 31.5, sales: 6769000 },\\n  { year: 2009, efficiency: 32.9, sales: 5402000 },\\n  { year: 2010, efficiency: 33.9, sales: 5636000 },\\n  { year: 2011, efficiency: 33.1, sales: 6093000 },\\n  { year: 2012, efficiency: 35.3, sales: 7245000 },\\n  { year: 2013, efficiency: 36.4, sales: 7586000 },\\n  { year: 2014, efficiency: 36.5, sales: 7708000 },\\n  { year: 2015, efficiency: 37.2, sales: 7517000 },\\n  { year: 2016, efficiency: 37.7, sales: 6873000 },\\n  { year: 2017, efficiency: 39.4, sales: 6081000 },\\n];\\n\\nexport const ActualVsBudgetD3 = () => {\\n  return (\\n    <Container>\\n      <Row>\\n        <BarchartD3 data={data1} />\\n      </Row>\\n    </Container>\\n  );\\n};\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"ActualVsBudgetD3\":{\"startLoc\":{\"col\":32,\"line\":110},\"endLoc\":{\"col\":1,\"line\":118},\"startBody\":{\"col\":32,\"line\":110},\"endBody\":{\"col\":1,\"line\":118}}};\n    \nimport React from 'react';\nimport { Container, Row } from 'reactstrap';\nimport { BarChartD3 } from '../components/BarchartD3';\n\nexport default {\n  /* ğŸ‘‡ The title prop is optional.\n   * See https://storybook.js.org/docs/react/configure/overview#configure-story-loading\n   * to learn how to generate automatic titles\n   */\n  title: 'DTD3 story',\n  component: BarChartD3,\n};\n\nconst data = [\n  {\n    client: 'Itau',\n    past: 150,\n    actual: 165,\n  },\n  {\n    client: 'Santander',\n    past: 210,\n    actual: 190,\n  },\n  {\n    client: 'Avangrid',\n    past: 222,\n    actual: 270,\n  },\n  {\n    client: 'IDB Invest',\n    past: 222,\n    actual: 270,\n  },\n  {\n    client: 'United Nations',\n    past: 200,\n    actual: 235,\n  },\n  //   {\n  //     client: 'September',\n  //     past: 280,\n  //     actual: 330,\n  //   },\n  //   {\n  //     client: 'October',\n  //     past: 330,\n  //     actual: 370,\n  //   },\n  //   {\n  //     client: 'November',\n  //     past: 370,\n  //     actual: 190,\n  //   },BarchartD3\n  //   {\n  //     client: 'December',\n  //     past: 350,\n  //     actual: 190,\n  //   },\n  //   {\n  //     client: 'January',\n  //     past: 410,\n  //     actual: 190,\n  //   },\n  //   {\n  //     client: 'February',\n  //     past: 415,\n  //     actual: 190,\n  //   },\n  //   {\n  //     client: 'March',\n  //     past: 475,\n  //     actual: 190,\n  //   },\n];\n\nconst data1 = [\n  { year: 1980, efficiency: 24.3, sales: 8949000 },\n  { year: 1985, efficiency: 27.6, sales: 10979000 },\n  { year: 1990, efficiency: 28, sales: 9303000 },\n  { year: 1991, efficiency: 28.4, sales: 8185000 },\n  { year: 1992, efficiency: 27.9, sales: 8213000 },\n  { year: 1993, efficiency: 28.4, sales: 8518000 },\n  { year: 1994, efficiency: 28.3, sales: 8991000 },\n  { year: 1995, efficiency: 28.6, sales: 8620000 },\n  { year: 1996, efficiency: 28.5, sales: 8479000 },\n  { year: 1997, efficiency: 28.7, sales: 8217000 },\n  { year: 1998, efficiency: 28.8, sales: 8085000 },\n  { year: 1999, efficiency: 28.3, sales: 8638000 },\n  { year: 2000, efficiency: 28.5, sales: 8778000 },\n  { year: 2001, efficiency: 28.8, sales: 8352000 },\n  { year: 2002, efficiency: 29, sales: 8042000 },\n  { year: 2003, efficiency: 29.5, sales: 7556000 },\n  { year: 2004, efficiency: 29.5, sales: 7483000 },\n  { year: 2005, efficiency: 30.3, sales: 7660000 },\n  { year: 2006, efficiency: 30.1, sales: 7762000 },\n  { year: 2007, efficiency: 31.2, sales: 7562000 },\n  { year: 2008, efficiency: 31.5, sales: 6769000 },\n  { year: 2009, efficiency: 32.9, sales: 5402000 },\n  { year: 2010, efficiency: 33.9, sales: 5636000 },\n  { year: 2011, efficiency: 33.1, sales: 6093000 },\n  { year: 2012, efficiency: 35.3, sales: 7245000 },\n  { year: 2013, efficiency: 36.4, sales: 7586000 },\n  { year: 2014, efficiency: 36.5, sales: 7708000 },\n  { year: 2015, efficiency: 37.2, sales: 7517000 },\n  { year: 2016, efficiency: 37.7, sales: 6873000 },\n  { year: 2017, efficiency: 39.4, sales: 6081000 },\n];\n\nexport const ActualVsBudgetD3 = () => {\n  return (\n    <Container>\n      <Row>\n        <BarchartD3 data={data1} />\n      </Row>\n    </Container>\n  );\n};\n\n\n\nActualVsBudgetD3.parameters = { storySource: { source: \"() => {\\n  return (\\n    <Container>\\n      <Row>\\n        <BarchartD3 data={data1} />\\n      </Row>\\n    </Container>\\n  );\\n}\" }, ...ActualVsBudgetD3.parameters };"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAAA;AAAA;AAEA;AAAA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AAAA;AAIA;AAEA;AAAA;AAGA;AAAA;AAKA;AAAA;AAGA;AAEA;AAAA;AAKA;AAAA;AACA;AAOA;AACA;AAEA;AACA;AAEA;AAOA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAGA;AA7EA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;ACJA;AAAA;AAAA;;;;;;;;;;;;;;ACAA;AAAA;AAAA;;;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;ACVA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAGA;AARA;AAYA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;A","sourceRoot":""}