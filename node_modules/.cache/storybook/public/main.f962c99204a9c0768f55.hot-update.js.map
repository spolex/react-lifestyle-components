{"version":3,"file":"main.f962c99204a9c0768f55.hot-update.js","sources":["webpack:///./src/components/Button/Button.js","webpack:///./src/components/Calendar/MonthView.js","webpack:///./src/components/Row/Row.js","webpack:///./src/components/Table/Table.js","webpack:///./src/stories/Button.stories.jsx","webpack:///./src/stories/Month.stories.jsx","webpack:///./src/stories/Table.stories.jsx"],"sourcesContent":["import React from 'react';\n\nexport const Button = ({ onClick, children, color, type = 'button' }) => {\n  return (\n    <button type={type} onClick={onClick} className={'btn btn-'.concat(color)}>\n      {children}\n    </button>\n  );\n};\n","import Moment from 'moment';\nimport { extendMoment } from 'moment-range';\n\nconst moment = extendMoment(Moment);\nimport { useEffect, useState } from 'react';\n\nexport const MonthView = ({ firstDay, endDay }) => {\n  const [weeksRange, setWeeksRange] = useState(\n    Array.from(moment.range(firstDay, endDay).by('weeks')),\n  );\n\n  useEffect(() => {\n    console.log(endDay.format('dddd'));\n  }, []);\n\n  return (\n    <div className=\"conatiner-fluid\">\n      <nav aria-label={moment().year()}>\n        <ul className=\"pagination\">\n          {moment.months().map((month, index) => (\n            <li className=\"page-item\" key={month} id={index + 1}>\n              <a className=\"page-link\">{month}</a>\n            </li>\n          ))}\n        </ul>\n      </nav>\n      <hr className=\"month-line\"></hr>\n      <table className=\"table\">\n        <thead>\n          <tr>\n            {moment.weekdays().map(weekDay => (\n              <th key={weekDay} className=\"days-of-week\">\n                {weekDay}\n              </th>\n            ))}\n          </tr>\n        </thead>\n        <tbody>\n          {weeksRange.map(week => {\n            <></>\n          })}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n","export const Row = ({ item, metadata, onItemChange }) => {\n  return (\n    <tr>\n      {Object.keys(metadata).map(key => {\n        if (key !== 'id') {\n          return (\n            <td key={key}>\n              {\n                <input\n                  className=\"form-control\"\n                  type={metadata[key].type}\n                  value={item[key]}\n                  onChange={event => {\n                    onItemChange({\n                      ...item,\n                      [key]:\n                        metadata[key].type === 'number'\n                          ? Number(event.target.value)\n                          : event.target.value,\n                    });\n                  }}\n                />\n              }\n            </td>\n          );\n        }\n      })}\n    </tr>\n  );\n};\n","import { Button } from '../Button';\nimport { Row } from '../Row/Row';\n\nexport const Table = ({\n  title,\n  metadata,\n  data,\n  handleOnSave,\n  onItemChange,\n  handleOnDelete,\n  handleOnAdd,\n}) => {\n  return (\n    <div>\n      <div>\n        <h2>{title}</h2>\n      </div>\n      <table className=\"table table-hover\">\n        <thead>\n          <tr>\n            {Object.keys(metadata).map(key => {\n              if (key !== 'id')\n                return (\n                  <th key={metadata[key].name} scope=\"col\">\n                    {metadata[key].name}\n                  </th>\n                );\n            })}\n          </tr>\n        </thead>\n        <tbody>\n          {data.map(item => (\n            <Row\n              key={item.id.value}\n              item={item}\n              metadata={metadata}\n              onItemChange={onItemChange}\n            ></Row>\n          ))}\n        </tbody>\n      </table>\n      <div className=\"row\">\n        <div className=\"col-10\">\n          <Button color=\"success\" onClick={e => handleOnSave(data)}>\n            Submit\n          </Button>\n        </div>\n        <div className=\"col-2\">\n          <Button color=\"danger\" onClick={handleOnDelete}>\n            -\n          </Button>\n          <Button color=\"primary\" onClick={handleOnAdd}>\n            +\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n};\n","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import 'bootstrap/dist/css/bootstrap.min.css';\\nimport { Button } from '../components/Button';\\n\\nexport default {\\n  title: 'COMPONENTS/Button',\\n  component: Button,\\n  argTypes: {\\n    color: {\\n      options: ['primary', 'secondary', 'danger', 'warning'],\\n      control: { type: 'select' },\\n    },\\n  },\\n};\\n\\nconst Template = args => <Button {...args}>{args.label}</Button>;\\n\\n//ðŸ‘‡ Each story then reuses that template\\nexport const Basic = Template.bind({});\\nBasic.args = {\\n  color: 'primary',\\n  label: 'Button',\\n  onClick: () => console.log('You clicked on the primary button!'),\\n};\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"Basic\":{\"startLoc\":{\"col\":17,\"line\":15},\"endLoc\":{\"col\":64,\"line\":15},\"startBody\":{\"col\":17,\"line\":15},\"endBody\":{\"col\":64,\"line\":15}}};\n    \nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Button } from '../components/Button';\n\nexport default {\n  title: 'COMPONENTS/Button',\n  component: Button,\n  argTypes: {\n    color: {\n      options: ['primary', 'secondary', 'danger', 'warning'],\n      control: { type: 'select' },\n    },\n  },\n};\n\nconst Template = args => <Button {...args}>{args.label}</Button>;\n\n//ðŸ‘‡ Each story then reuses that template\nexport const Basic = Template.bind({});\nBasic.args = {\n  color: 'primary',\n  label: 'Button',\n  onClick: () => console.log('You clicked on the primary button!'),\n};\n\n\n\nBasic.parameters = { storySource: { source: \"args => <Button {...args}>{args.label}</Button>\" }, ...Basic.parameters };","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import 'bootstrap/dist/css/bootstrap.min.css';\\nimport moment from 'moment/moment';\\nimport { MonthView } from '../components/Calendar';\\n\\nexport default {\\n  title: 'COMPONENTS/Month',\\n  component: MonthView,\\n};\\n\\nconst Template = args => <MonthView {...args}></MonthView>;\\n\\n//ðŸ‘‡ Each story then reuses that template\\nexport const Month = Template.bind({});\\nMonth.args = {\\n  firstDay: moment(new Date()).startOf('month'),\\n  endDay: moment(new Date()).endOf('month'),\\n};\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"Month\":{\"startLoc\":{\"col\":17,\"line\":10},\"endLoc\":{\"col\":58,\"line\":10},\"startBody\":{\"col\":17,\"line\":10},\"endBody\":{\"col\":58,\"line\":10}}};\n    \nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport moment from 'moment/moment';\nimport { MonthView } from '../components/Calendar';\n\nexport default {\n  title: 'COMPONENTS/Month',\n  component: MonthView,\n};\n\nconst Template = args => <MonthView {...args}></MonthView>;\n\n//ðŸ‘‡ Each story then reuses that template\nexport const Month = Template.bind({});\nMonth.args = {\n  firstDay: moment(new Date()).startOf('month'),\n  endDay: moment(new Date()).endOf('month'),\n};\n\n\n\nMonth.parameters = { storySource: { source: \"args => <MonthView {...args}></MonthView>\" }, ...Month.parameters };","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import 'bootstrap/dist/css/bootstrap.min.css';\\nimport { useEffect, useState } from 'react';\\nimport { Table } from '../components/Table';\\nimport moment from 'moment';\\n\\nexport default {\\n  title: 'COMPONENTS/Table',\\n  component: Table,\\n};\\n\\nexport const WorkOut = args => {\\n  const [_data, setData] = useState(args.dataset);\\n  const [_metadata, setMetadata] = useState(args.metadata);\\n  const [min, setMin] = useState(args.min);\\n  const [max, setMax] = useState(args.max);\\n\\n  useEffect(() => {\\n    setMin(args.min);\\n    setMax(args.max);\\n    setData(args.dataset);\\n  }, [args.max, args.min, args.dataset]);\\n\\n  const onItemChange = udpatedItem => {\\n    console.log('Itemmmmmmmm is changing!!!');\\n    console.log(udpatedItem);\\n    setData(\\n      _data.map(item => {\\n        if (item.id === udpatedItem.id) {\\n          return udpatedItem;\\n        }\\n        return item;\\n      }),\\n    );\\n  };\\n\\n  const handleOnAdd = () => {\\n    console.log(max);\\n    if (_data.length < max) {\\n      console.log('Adding row!!!');\\n      var newItem = {};\\n      Object.keys(_metadata).map(key => {\\n        if (key === 'id') newItem[key] = _data.length + 1;\\n        else newItem[key] = _metadata[key].default;\\n      });\\n      setData([..._data, newItem]);\\n    } else console.log('That is the max!!!');\\n  };\\n\\n  const handleOnDelete = () => {\\n    if (_data.length > min) {\\n      console.log('We are deleting data');\\n      setData(_data.filter(item => item.id !== _data.length));\\n    } else console.log('That is the min!!!');\\n  };\\n\\n  return (\\n    <Table\\n      onItemChange={onItemChange}\\n      data={_data}\\n      metadata={_metadata}\\n      handleOnAdd={handleOnAdd}\\n      handleOnDelete={handleOnDelete}\\n      handleOnSave={args.handleOnSave}\\n      {...args}\\n    />\\n  );\\n};\\n\\nWorkOut.args = {\\n  title: 'Curl biceps',\\n  muscleGroup: 'Biceps',\\n  dataset: [\\n    { id: 1, date: '2022-11-23', repetitions: 15, weigth: 100 },\\n    { id: 2, date: '2022-11-23', repetitions: 10, weigth: 18 },\\n  ],\\n  metadata: {\\n    id: { name: 'id', type: 'text' },\\n    date: {\\n      name: 'date',\\n      type: 'date',\\n      default: moment(new Date()).format('YYYY-MM-DD'),\\n    },\\n    repetitions: { name: 'repetitions', type: 'number', default: 10 },\\n    weigth: { name: 'weigth', type: 'number', default: 50 },\\n  },\\n  max: 10,\\n  min: 1,\\n  handleOnSave: data => {\\n    console.log('Saving data!!!!');\\n    console.log(data);\\n  },\\n};\\n\\nexport const Project = args => {\\n  const [_data, setData] = useState([]);\\n  const [_metadata, setMetadata] = useState({});\\n  const [min, setMin] = useState(args.min);\\n  const [max, setMax] = useState(args.max);\\n  const [_format, setFormat] = useState(args.format);\\n  const [initialDate, setInitialDate] = useState(args.initialDate);\\n  const [months, setMonths] = useState(\\n    Array.from(Array(12).keys()).map(month => moment(initialDate).add(month, 'M').format(_format)),\\n  );\\n\\n  useEffect(() => {\\n    setMin(args.min);\\n    setMax(args.max);\\n\\n    args.schema = { ...args.schema, end_date: { name: 'end_date', type: 'date' } };\\n    months.map(month => {\\n      args.schema = { ...args.schema, [month]: { name: [month], type: 'number' } };\\n    });\\n    setMetadata(args.schema);\\n\\n    setData(\\n      args.dataset.map(item => {\\n        var new_end_date = moment(item.start_date).add(item.duration, 'M').format(_format);\\n        months.map(month => {\\n          var include = Number(item.start_date <= month && month <= new_end_date);\\n          return (item[month] = (include * item.value) / item.duration);\\n        });\\n        return {\\n          ...item,\\n          end_date: new_end_date,\\n        };\\n      }),\\n    );\\n  }, [args.max, args.min]);\\n\\n  const save = () => {\\n    console.log(JSON.stringify(_data));\\n  };\\n\\n  const onItemChange = udpatedItem => {\\n    console.log('Itemmmmmmmm is changing!!!');\\n    console.log(udpatedItem);\\n    setData(\\n      _data.map(item => {\\n        if (item.id === udpatedItem.id) {\\n          return udpatedItem;\\n        }\\n        return item;\\n      }),\\n    );\\n  };\\n\\n  const handleOnAdd = () => {\\n    console.log(max);\\n    if (_data.length < max) {\\n      console.log('Adding row!!!');\\n      var newItem = {};\\n      Object.keys(_metadata).map(key => {\\n        if (key === 'id') newItem[key] = _data.length + 1;\\n        else newItem[key] = _metadata[key].default;\\n      });\\n      setData([..._data, newItem]);\\n    } else console.log('That is the max!!!');\\n  };\\n\\n  return (\\n    <Table\\n      data={_data}\\n      metadata={_metadata}\\n      onItemChange={onItemChange}\\n      handleOnAdd={handleOnAdd}\\n      handleOnSave={save}\\n      {...args}\\n    />\\n  );\\n};\\n\\nProject.args = {\\n  title: 'Deatailed Forecast',\\n  muscleGroup: 'Forecast',\\n  format: 'YYYY-MM-DD',\\n  initialDate: '2023-04-01',\\n  dataset: [\\n    {\\n      id: 1,\\n      project_name: 'Machine Learning Service',\\n      metric: 'Service Revenue',\\n      value: 150000,\\n      start_date: '2023-04-01',\\n      duration: 6,\\n    },\\n    {\\n      id: 2,\\n      project_name: 'Machine Learning Service',\\n      metric: 'Centers Revenue',\\n      value: 4000,\\n      start_date: '2023-04-01',\\n      duration: 3,\\n    },\\n  ],\\n  schema: {\\n    id: { name: 'id', type: 'text' },\\n    project_name: { name: 'Project', type: 'text', default: 'Project Name' },\\n    metric: { name: 'Metrics', type: 'text', default: 'Insert your metric name' },\\n    value: { name: 'Total', type: 'number', default: 3 },\\n    duration: { name: 'Duration', type: 'number', default: 3 },\\n    start_date: {\\n      name: 'Start date',\\n      type: 'date',\\n      default: moment(new Date()).format('YYYY-MM-DD'),\\n    },\\n  },\\n  max: 10,\\n  min: 1,\\n};\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"WorkOut\":{\"startLoc\":{\"col\":23,\"line\":11},\"endLoc\":{\"col\":1,\"line\":67},\"startBody\":{\"col\":23,\"line\":11},\"endBody\":{\"col\":1,\"line\":67}},\"Project\":{\"startLoc\":{\"col\":23,\"line\":94},\"endLoc\":{\"col\":1,\"line\":170},\"startBody\":{\"col\":23,\"line\":94},\"endBody\":{\"col\":1,\"line\":170}}};\n    \nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { useEffect, useState } from 'react';\nimport { Table } from '../components/Table';\nimport moment from 'moment';\n\nexport default {\n  title: 'COMPONENTS/Table',\n  component: Table,\n};\n\nexport const WorkOut = args => {\n  const [_data, setData] = useState(args.dataset);\n  const [_metadata, setMetadata] = useState(args.metadata);\n  const [min, setMin] = useState(args.min);\n  const [max, setMax] = useState(args.max);\n\n  useEffect(() => {\n    setMin(args.min);\n    setMax(args.max);\n    setData(args.dataset);\n  }, [args.max, args.min, args.dataset]);\n\n  const onItemChange = udpatedItem => {\n    console.log('Itemmmmmmmm is changing!!!');\n    console.log(udpatedItem);\n    setData(\n      _data.map(item => {\n        if (item.id === udpatedItem.id) {\n          return udpatedItem;\n        }\n        return item;\n      }),\n    );\n  };\n\n  const handleOnAdd = () => {\n    console.log(max);\n    if (_data.length < max) {\n      console.log('Adding row!!!');\n      var newItem = {};\n      Object.keys(_metadata).map(key => {\n        if (key === 'id') newItem[key] = _data.length + 1;\n        else newItem[key] = _metadata[key].default;\n      });\n      setData([..._data, newItem]);\n    } else console.log('That is the max!!!');\n  };\n\n  const handleOnDelete = () => {\n    if (_data.length > min) {\n      console.log('We are deleting data');\n      setData(_data.filter(item => item.id !== _data.length));\n    } else console.log('That is the min!!!');\n  };\n\n  return (\n    <Table\n      onItemChange={onItemChange}\n      data={_data}\n      metadata={_metadata}\n      handleOnAdd={handleOnAdd}\n      handleOnDelete={handleOnDelete}\n      handleOnSave={args.handleOnSave}\n      {...args}\n    />\n  );\n};;\n\nWorkOut.args = {\n  title: 'Curl biceps',\n  muscleGroup: 'Biceps',\n  dataset: [\n    { id: 1, date: '2022-11-23', repetitions: 15, weigth: 100 },\n    { id: 2, date: '2022-11-23', repetitions: 10, weigth: 18 },\n  ],\n  metadata: {\n    id: { name: 'id', type: 'text' },\n    date: {\n      name: 'date',\n      type: 'date',\n      default: moment(new Date()).format('YYYY-MM-DD'),\n    },\n    repetitions: { name: 'repetitions', type: 'number', default: 10 },\n    weigth: { name: 'weigth', type: 'number', default: 50 },\n  },\n  max: 10,\n  min: 1,\n  handleOnSave: data => {\n    console.log('Saving data!!!!');\n    console.log(data);\n  },\n};\n\nexport const Project = args => {\n  const [_data, setData] = useState([]);\n  const [_metadata, setMetadata] = useState({});\n  const [min, setMin] = useState(args.min);\n  const [max, setMax] = useState(args.max);\n  const [_format, setFormat] = useState(args.format);\n  const [initialDate, setInitialDate] = useState(args.initialDate);\n  const [months, setMonths] = useState(\n    Array.from(Array(12).keys()).map(month => moment(initialDate).add(month, 'M').format(_format)),\n  );\n\n  useEffect(() => {\n    setMin(args.min);\n    setMax(args.max);\n\n    args.schema = { ...args.schema, end_date: { name: 'end_date', type: 'date' } };\n    months.map(month => {\n      args.schema = { ...args.schema, [month]: { name: [month], type: 'number' } };\n    });\n    setMetadata(args.schema);\n\n    setData(\n      args.dataset.map(item => {\n        var new_end_date = moment(item.start_date).add(item.duration, 'M').format(_format);\n        months.map(month => {\n          var include = Number(item.start_date <= month && month <= new_end_date);\n          return (item[month] = (include * item.value) / item.duration);\n        });\n        return {\n          ...item,\n          end_date: new_end_date,\n        };\n      }),\n    );\n  }, [args.max, args.min]);\n\n  const save = () => {\n    console.log(JSON.stringify(_data));\n  };\n\n  const onItemChange = udpatedItem => {\n    console.log('Itemmmmmmmm is changing!!!');\n    console.log(udpatedItem);\n    setData(\n      _data.map(item => {\n        if (item.id === udpatedItem.id) {\n          return udpatedItem;\n        }\n        return item;\n      }),\n    );\n  };\n\n  const handleOnAdd = () => {\n    console.log(max);\n    if (_data.length < max) {\n      console.log('Adding row!!!');\n      var newItem = {};\n      Object.keys(_metadata).map(key => {\n        if (key === 'id') newItem[key] = _data.length + 1;\n        else newItem[key] = _metadata[key].default;\n      });\n      setData([..._data, newItem]);\n    } else console.log('That is the max!!!');\n  };\n\n  return (\n    <Table\n      data={_data}\n      metadata={_metadata}\n      onItemChange={onItemChange}\n      handleOnAdd={handleOnAdd}\n      handleOnSave={save}\n      {...args}\n    />\n  );\n};\n\nProject.args = {\n  title: 'Deatailed Forecast',\n  muscleGroup: 'Forecast',\n  format: 'YYYY-MM-DD',\n  initialDate: '2023-04-01',\n  dataset: [\n    {\n      id: 1,\n      project_name: 'Machine Learning Service',\n      metric: 'Service Revenue',\n      value: 150000,\n      start_date: '2023-04-01',\n      duration: 6,\n    },\n    {\n      id: 2,\n      project_name: 'Machine Learning Service',\n      metric: 'Centers Revenue',\n      value: 4000,\n      start_date: '2023-04-01',\n      duration: 3,\n    },\n  ],\n  schema: {\n    id: { name: 'id', type: 'text' },\n    project_name: { name: 'Project', type: 'text', default: 'Project Name' },\n    metric: { name: 'Metrics', type: 'text', default: 'Insert your metric name' },\n    value: { name: 'Total', type: 'number', default: 3 },\n    duration: { name: 'Duration', type: 'number', default: 3 },\n    start_date: {\n      name: 'Start date',\n      type: 'date',\n      default: moment(new Date()).format('YYYY-MM-DD'),\n    },\n  },\n  max: 10,\n  min: 1,\n};\n\n\n\nWorkOut.parameters = { storySource: { source: \"args => {\\n  const [_data, setData] = useState(args.dataset);\\n  const [_metadata, setMetadata] = useState(args.metadata);\\n  const [min, setMin] = useState(args.min);\\n  const [max, setMax] = useState(args.max);\\n\\n  useEffect(() => {\\n    setMin(args.min);\\n    setMax(args.max);\\n    setData(args.dataset);\\n  }, [args.max, args.min, args.dataset]);\\n\\n  const onItemChange = udpatedItem => {\\n    console.log('Itemmmmmmmm is changing!!!');\\n    console.log(udpatedItem);\\n    setData(\\n      _data.map(item => {\\n        if (item.id === udpatedItem.id) {\\n          return udpatedItem;\\n        }\\n        return item;\\n      }),\\n    );\\n  };\\n\\n  const handleOnAdd = () => {\\n    console.log(max);\\n    if (_data.length < max) {\\n      console.log('Adding row!!!');\\n      var newItem = {};\\n      Object.keys(_metadata).map(key => {\\n        if (key === 'id') newItem[key] = _data.length + 1;\\n        else newItem[key] = _metadata[key].default;\\n      });\\n      setData([..._data, newItem]);\\n    } else console.log('That is the max!!!');\\n  };\\n\\n  const handleOnDelete = () => {\\n    if (_data.length > min) {\\n      console.log('We are deleting data');\\n      setData(_data.filter(item => item.id !== _data.length));\\n    } else console.log('That is the min!!!');\\n  };\\n\\n  return (\\n    <Table\\n      onItemChange={onItemChange}\\n      data={_data}\\n      metadata={_metadata}\\n      handleOnAdd={handleOnAdd}\\n      handleOnDelete={handleOnDelete}\\n      handleOnSave={args.handleOnSave}\\n      {...args}\\n    />\\n  );\\n}\" }, ...WorkOut.parameters };\nProject.parameters = { storySource: { source: \"args => {\\n  const [_data, setData] = useState([]);\\n  const [_metadata, setMetadata] = useState({});\\n  const [min, setMin] = useState(args.min);\\n  const [max, setMax] = useState(args.max);\\n  const [_format, setFormat] = useState(args.format);\\n  const [initialDate, setInitialDate] = useState(args.initialDate);\\n  const [months, setMonths] = useState(\\n    Array.from(Array(12).keys()).map(month => moment(initialDate).add(month, 'M').format(_format)),\\n  );\\n\\n  useEffect(() => {\\n    setMin(args.min);\\n    setMax(args.max);\\n\\n    args.schema = { ...args.schema, end_date: { name: 'end_date', type: 'date' } };\\n    months.map(month => {\\n      args.schema = { ...args.schema, [month]: { name: [month], type: 'number' } };\\n    });\\n    setMetadata(args.schema);\\n\\n    setData(\\n      args.dataset.map(item => {\\n        var new_end_date = moment(item.start_date).add(item.duration, 'M').format(_format);\\n        months.map(month => {\\n          var include = Number(item.start_date <= month && month <= new_end_date);\\n          return (item[month] = (include * item.value) / item.duration);\\n        });\\n        return {\\n          ...item,\\n          end_date: new_end_date,\\n        };\\n      }),\\n    );\\n  }, [args.max, args.min]);\\n\\n  const save = () => {\\n    console.log(JSON.stringify(_data));\\n  };\\n\\n  const onItemChange = udpatedItem => {\\n    console.log('Itemmmmmmmm is changing!!!');\\n    console.log(udpatedItem);\\n    setData(\\n      _data.map(item => {\\n        if (item.id === udpatedItem.id) {\\n          return udpatedItem;\\n        }\\n        return item;\\n      }),\\n    );\\n  };\\n\\n  const handleOnAdd = () => {\\n    console.log(max);\\n    if (_data.length < max) {\\n      console.log('Adding row!!!');\\n      var newItem = {};\\n      Object.keys(_metadata).map(key => {\\n        if (key === 'id') newItem[key] = _data.length + 1;\\n        else newItem[key] = _metadata[key].default;\\n      });\\n      setData([..._data, newItem]);\\n    } else console.log('That is the max!!!');\\n  };\\n\\n  return (\\n    <Table\\n      data={_data}\\n      metadata={_metadata}\\n      onItemChange={onItemChange}\\n      handleOnAdd={handleOnAdd}\\n      handleOnSave={save}\\n      {...args}\\n    />\\n  );\\n}\" }, ...Project.parameters };"],"mappings":"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AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAHA;AAKA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AARA;AAUA;AACA;AACA;AACA;AACA;AACA;AAtBA;AAyBA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AADA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAFA;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AALA;AASA;AA5EA;AA8EA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAHA;AANA;AAYA;AACA;AApCA;AAyCA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;A","sourceRoot":""}