{"version":3,"file":"main.ef753ee2dc685ee720fc.hot-update.js","sources":["webpack:///./src/components/Barchart/Barchart.js"],"sourcesContent":["import { Bar, Chart } from '../Chart/Chart';\nimport { Container, Row } from 'reactstrap';\n\nexport * from './Barchart';\n// import { Chart, Bar } from './Chart';\n\nexport const Barchart = ({ data, y = 0, diff }) => {\n  // Width of each bar\n  const itemWidth = 20;\n\n  //   // Distance between each bar\n  const itemMargin = 5;\n\n  const dataLength = data.length;\n\n  //   // Normalize data, we'll reduce all sizes to 25% of their original value\n  const massagedData = data.map(datum =>\n    Object.assign({}, datum, { past: datum.past * 0.5, actual: datum.actual * 0.5 }),\n  );\n\n  const mostRepos = massagedData.reduce((acc, cur) => {\n    const { past } = cur;\n    return past > acc ? past : acc;\n  }, 0);\n\n  const chartHeight = mostRepos;\n\n  if (!diff)\n    return (\n      <div>\n        <Chart width={2 * dataLength * (itemWidth + itemMargin)} height={chartHeight}>\n          {massagedData.map((datum, index) => (\n            <>\n              {'helllo'}\n              <Bar\n                key={datum.name}\n                x={\n                  index == 0\n                    ? index * (itemWidth + itemMargin)\n                    : index * 2 * (itemWidth + itemMargin)\n                }\n                y={y}\n                width={itemWidth}\n                height={datum.past}\n                fill=\"teal\"\n              />\n              <Bar\n                key={datum.name}\n                x={\n                  index == 0\n                    ? (index + 0.85) * (itemWidth + itemMargin)\n                    : (index * 2 + 0.85) * (itemWidth + itemMargin)\n                }\n                y={y}\n                width={itemWidth}\n                height={datum.actual}\n                fill=\"orange\"\n              />\n            </>\n          ))}\n        </Chart>\n      </div>\n    );\n  else {\n    return (\n      <div>\n        <Chart width={2 * dataLength * (itemWidth + itemMargin)} height={chartHeight}>\n          {massagedData.map((datum, index) => (\n            <Bar\n              key={datum.name}\n              x={\n                index == 0 ? index * (itemWidth + itemMargin) : index * 2 * (itemWidth + itemMargin)\n              }\n              y={datum.actual - datum.past > 0 ? y : y + (datum.actual - datum.past)}\n              width={itemWidth}\n              height={Math.abs(datum.actual - datum.past)}\n              fill={datum.actual - datum.past > 0 ? 'teal' : 'red'}\n            />\n          ))}\n        </Chart>\n      </div>\n    );\n  }\n};\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;;;;AAEA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AAAA;AACA;AAAA;AAAA;AADA;AAIA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AAIA;AAKA;AACA;AACA;AACA;AAVA;AAcA;AAKA;AACA;AACA;AACA;AAVA;AAdA;AADA;AADA;AADA;AAmCA;AACA;AACA;AAAA;AAAA;AACA;AAGA;AAGA;AACA;AACA;AACA;AARA;AADA;AADA;AADA;AAiBA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;A","sourceRoot":""}