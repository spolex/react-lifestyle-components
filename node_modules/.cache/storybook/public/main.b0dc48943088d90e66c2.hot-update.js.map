{"version":3,"file":"main.b0dc48943088d90e66c2.hot-update.js","sources":["webpack:///./src/stories/Table.stories.jsx"],"sourcesContent":["\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import 'bootstrap/dist/css/bootstrap.min.css';\\nimport { useEffect, useState } from 'react';\\nimport { Table } from '../components/Table';\\nimport moment from 'moment';\\n\\nexport default {\\n  title: 'COMPONENTS/Table',\\n  component: Table,\\n};\\n\\nexport const WorkOut = args => {\\n  const [_data, setData] = useState(args.dataset);\\n  const [_metadata, setMetadata] = useState(args.metadata);\\n  const [min, setMin] = useState(args.min);\\n  const [max, setMax] = useState(args.max);\\n\\n  useEffect(() => {\\n    setMin(args.min);\\n    setMax(args.max);\\n    setData(args.dataset);\\n  }, [args.max, args.min, args.dataset]);\\n\\n  const onItemChange = udpatedItem => {\\n    console.log('Itemmmmmmmm is changing!!!');\\n    console.log(udpatedItem);\\n    setData(\\n      _data.map(item => {\\n        if (item.id === udpatedItem.id) {\\n          return udpatedItem;\\n        }\\n        return item;\\n      }),\\n    );\\n  };\\n\\n  const handleOnAdd = () => {\\n    console.log(max);\\n    if (_data.length < max) {\\n      console.log('Adding row!!!');\\n      var newItem = {};\\n      Object.keys(_metadata).map(key => {\\n        if (key === 'id') newItem[key] = _data.length + 1;\\n        else newItem[key] = _metadata[key].default;\\n      });\\n      setData([..._data, newItem]);\\n    } else console.log('That is the max!!!');\\n  };\\n\\n  const handleOnDelete = () => {\\n    if (_data.length > min) {\\n      console.log('We are deleting data');\\n      setData(_data.filter(item => item.id !== _data.length));\\n    } else console.log('That is the min!!!');\\n  };\\n\\n  return (\\n    <Table\\n      onItemChange={onItemChange}\\n      data={_data}\\n      metadata={_metadata}\\n      handleOnAdd={handleOnAdd}\\n      handleOnDelete={handleOnDelete}\\n      handleOnSave={args.handleOnSave}\\n      {...args}\\n    />\\n  );\\n};\\n\\nWorkOut.args = {\\n  title: 'Curl biceps',\\n  muscleGroup: 'Biceps',\\n  dataset: [\\n    { id: 1, date: '2022-11-23', repetitions: 15, weigth: 100 },\\n    { id: 2, date: '2022-11-23', repetitions: 10, weigth: 18 },\\n  ],\\n  metadata: {\\n    id: { name: 'id', type: 'text' },\\n    date: {\\n      name: 'date',\\n      type: 'date',\\n      default: moment(new Date()).format('YYYY-MM-DD'),\\n    },\\n    repetitions: { name: 'repetitions', type: 'number', default: 10 },\\n    weigth: { name: 'weigth', type: 'number', default: 50 },\\n  },\\n  max: 10,\\n  min: 1,\\n  handleOnSave: data => {\\n    console.log('Saving data!!!!');\\n    console.log(data);\\n  },\\n};\\n\\nexport const Project = args => {\\n  const [_data, setData] = useState([]);\\n  const [_metadata, setMetadata] = useState({});\\n  const [min, setMin] = useState(args.min);\\n  const [max, setMax] = useState(args.max);\\n  const [_format, setFormat] = useState(args.format);\\n  const [initialDate, setInitialDate] = useState(args.initialDate);\\n  const [months, setMonths] = useState(\\n    Array.from(Array(12).keys()).map(month => moment(initialDate).add(month, 'M').format(_format)),\\n  );\\n\\n  useEffect(() => {\\n    setMin(args.min);\\n    setMax(args.max);\\n\\n    args.schema = { ...args.schema, end_date: { name: 'end_date', type: 'date' } };\\n    months.map(month => {\\n      args.schema = { ...args.schema, [month]: { name: [month], type: 'number' } };\\n    });\\n    setMetadata(args.schema);\\n\\n    setData(\\n      args.dataset.map(item => {\\n        return {\\n          ...item,\\n          end_date: moment(item.start_date).add(item.duration, 'M').format(_format),\\n        };\\n      }),\\n    );\\n  }, [args.max, args.min]);\\n\\n  const onItemChange = udpatedItem => {\\n    console.log('Itemmmmmmmm is changing!!!');\\n    console.log(udpatedItem);\\n    setData(\\n      _data.map(item => {\\n        if (item.id === udpatedItem.id) {\\n          return udpatedItem;\\n        }\\n        return item;\\n      }),\\n    );\\n  };\\n\\n  const handleOnAdd = () => {\\n    console.log(max);\\n    if (_data.length < max) {\\n      console.log('Adding row!!!');\\n      var newItem = {};\\n      Object.keys(_metadata).map(key => {\\n        if (key === 'id') newItem[key] = _data.length + 1;\\n        else newItem[key] = _metadata[key].default;\\n      });\\n      setData([..._data, newItem]);\\n    } else console.log('That is the max!!!');\\n  };\\n\\n  return (\\n    <Table\\n      data={_data}\\n      metadata={_metadata}\\n      onItemChange={onItemChange}\\n      handleOnAdd={handleOnAdd}\\n      {...args}\\n    />\\n  );\\n};\\n\\nProject.args = {\\n  title: 'Deatailed Forecast',\\n  muscleGroup: 'Forecast',\\n  format: 'YYYY-MM-DD',\\n  initialDate: '2023-04-01',\\n  dataset: [\\n    {\\n      id: 1,\\n      project_name: 'Machine Learning Service',\\n      metric: 'Service Revenue',\\n      value: 150000,\\n      start_date: '2023-04-01',\\n      duration: 6,\\n    },\\n    {\\n      id: 2,\\n      project_name: 'Machine Learning Service',\\n      metric: 'Centers Revenue',\\n      value: 4000,\\n      start_date: '2023-04-01',\\n      duration: 3,\\n    },\\n  ],\\n  schema: {\\n    id: { name: 'id', type: 'text' },\\n    project_name: { name: 'Project', type: 'text', default: 'Project Name' },\\n    metric: { name: 'Metrics', type: 'text', default: 'Insert your metric name' },\\n    value: { name: 'Total', type: 'number', default: 3 },\\n    duration: { name: 'Duration', type: 'number', default: 3 },\\n    start_date: {\\n      name: 'Start date',\\n      type: 'date',\\n      default: moment(new Date()).format('YYYY-MM-DD'),\\n    },\\n  },\\n  max: 10,\\n  min: 1,\\n  handleOnSave: data => {\\n    console.log('Saving data!!!!');\\n    console.log(data);\\n  },\\n};\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"WorkOut\":{\"startLoc\":{\"col\":23,\"line\":11},\"endLoc\":{\"col\":1,\"line\":67},\"startBody\":{\"col\":23,\"line\":11},\"endBody\":{\"col\":1,\"line\":67}},\"Project\":{\"startLoc\":{\"col\":23,\"line\":94},\"endLoc\":{\"col\":1,\"line\":160},\"startBody\":{\"col\":23,\"line\":94},\"endBody\":{\"col\":1,\"line\":160}}};\n    \nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { useEffect, useState } from 'react';\nimport { Table } from '../components/Table';\nimport moment from 'moment';\n\nexport default {\n  title: 'COMPONENTS/Table',\n  component: Table,\n};\n\nexport const WorkOut = args => {\n  const [_data, setData] = useState(args.dataset);\n  const [_metadata, setMetadata] = useState(args.metadata);\n  const [min, setMin] = useState(args.min);\n  const [max, setMax] = useState(args.max);\n\n  useEffect(() => {\n    setMin(args.min);\n    setMax(args.max);\n    setData(args.dataset);\n  }, [args.max, args.min, args.dataset]);\n\n  const onItemChange = udpatedItem => {\n    console.log('Itemmmmmmmm is changing!!!');\n    console.log(udpatedItem);\n    setData(\n      _data.map(item => {\n        if (item.id === udpatedItem.id) {\n          return udpatedItem;\n        }\n        return item;\n      }),\n    );\n  };\n\n  const handleOnAdd = () => {\n    console.log(max);\n    if (_data.length < max) {\n      console.log('Adding row!!!');\n      var newItem = {};\n      Object.keys(_metadata).map(key => {\n        if (key === 'id') newItem[key] = _data.length + 1;\n        else newItem[key] = _metadata[key].default;\n      });\n      setData([..._data, newItem]);\n    } else console.log('That is the max!!!');\n  };\n\n  const handleOnDelete = () => {\n    if (_data.length > min) {\n      console.log('We are deleting data');\n      setData(_data.filter(item => item.id !== _data.length));\n    } else console.log('That is the min!!!');\n  };\n\n  return (\n    <Table\n      onItemChange={onItemChange}\n      data={_data}\n      metadata={_metadata}\n      handleOnAdd={handleOnAdd}\n      handleOnDelete={handleOnDelete}\n      handleOnSave={args.handleOnSave}\n      {...args}\n    />\n  );\n};;\n\nWorkOut.args = {\n  title: 'Curl biceps',\n  muscleGroup: 'Biceps',\n  dataset: [\n    { id: 1, date: '2022-11-23', repetitions: 15, weigth: 100 },\n    { id: 2, date: '2022-11-23', repetitions: 10, weigth: 18 },\n  ],\n  metadata: {\n    id: { name: 'id', type: 'text' },\n    date: {\n      name: 'date',\n      type: 'date',\n      default: moment(new Date()).format('YYYY-MM-DD'),\n    },\n    repetitions: { name: 'repetitions', type: 'number', default: 10 },\n    weigth: { name: 'weigth', type: 'number', default: 50 },\n  },\n  max: 10,\n  min: 1,\n  handleOnSave: data => {\n    console.log('Saving data!!!!');\n    console.log(data);\n  },\n};\n\nexport const Project = args => {\n  const [_data, setData] = useState([]);\n  const [_metadata, setMetadata] = useState({});\n  const [min, setMin] = useState(args.min);\n  const [max, setMax] = useState(args.max);\n  const [_format, setFormat] = useState(args.format);\n  const [initialDate, setInitialDate] = useState(args.initialDate);\n  const [months, setMonths] = useState(\n    Array.from(Array(12).keys()).map(month => moment(initialDate).add(month, 'M').format(_format)),\n  );\n\n  useEffect(() => {\n    setMin(args.min);\n    setMax(args.max);\n\n    args.schema = { ...args.schema, end_date: { name: 'end_date', type: 'date' } };\n    months.map(month => {\n      args.schema = { ...args.schema, [month]: { name: [month], type: 'number' } };\n    });\n    setMetadata(args.schema);\n\n    setData(\n      args.dataset.map(item => {\n        return {\n          ...item,\n          end_date: moment(item.start_date).add(item.duration, 'M').format(_format),\n        };\n      }),\n    );\n  }, [args.max, args.min]);\n\n  const onItemChange = udpatedItem => {\n    console.log('Itemmmmmmmm is changing!!!');\n    console.log(udpatedItem);\n    setData(\n      _data.map(item => {\n        if (item.id === udpatedItem.id) {\n          return udpatedItem;\n        }\n        return item;\n      }),\n    );\n  };\n\n  const handleOnAdd = () => {\n    console.log(max);\n    if (_data.length < max) {\n      console.log('Adding row!!!');\n      var newItem = {};\n      Object.keys(_metadata).map(key => {\n        if (key === 'id') newItem[key] = _data.length + 1;\n        else newItem[key] = _metadata[key].default;\n      });\n      setData([..._data, newItem]);\n    } else console.log('That is the max!!!');\n  };\n\n  return (\n    <Table\n      data={_data}\n      metadata={_metadata}\n      onItemChange={onItemChange}\n      handleOnAdd={handleOnAdd}\n      {...args}\n    />\n  );\n};\n\nProject.args = {\n  title: 'Deatailed Forecast',\n  muscleGroup: 'Forecast',\n  format: 'YYYY-MM-DD',\n  initialDate: '2023-04-01',\n  dataset: [\n    {\n      id: 1,\n      project_name: 'Machine Learning Service',\n      metric: 'Service Revenue',\n      value: 150000,\n      start_date: '2023-04-01',\n      duration: 6,\n    },\n    {\n      id: 2,\n      project_name: 'Machine Learning Service',\n      metric: 'Centers Revenue',\n      value: 4000,\n      start_date: '2023-04-01',\n      duration: 3,\n    },\n  ],\n  schema: {\n    id: { name: 'id', type: 'text' },\n    project_name: { name: 'Project', type: 'text', default: 'Project Name' },\n    metric: { name: 'Metrics', type: 'text', default: 'Insert your metric name' },\n    value: { name: 'Total', type: 'number', default: 3 },\n    duration: { name: 'Duration', type: 'number', default: 3 },\n    start_date: {\n      name: 'Start date',\n      type: 'date',\n      default: moment(new Date()).format('YYYY-MM-DD'),\n    },\n  },\n  max: 10,\n  min: 1,\n  handleOnSave: data => {\n    console.log('Saving data!!!!');\n    console.log(data);\n  },\n};\n\n\n\nWorkOut.parameters = { storySource: { source: \"args => {\\n  const [_data, setData] = useState(args.dataset);\\n  const [_metadata, setMetadata] = useState(args.metadata);\\n  const [min, setMin] = useState(args.min);\\n  const [max, setMax] = useState(args.max);\\n\\n  useEffect(() => {\\n    setMin(args.min);\\n    setMax(args.max);\\n    setData(args.dataset);\\n  }, [args.max, args.min, args.dataset]);\\n\\n  const onItemChange = udpatedItem => {\\n    console.log('Itemmmmmmmm is changing!!!');\\n    console.log(udpatedItem);\\n    setData(\\n      _data.map(item => {\\n        if (item.id === udpatedItem.id) {\\n          return udpatedItem;\\n        }\\n        return item;\\n      }),\\n    );\\n  };\\n\\n  const handleOnAdd = () => {\\n    console.log(max);\\n    if (_data.length < max) {\\n      console.log('Adding row!!!');\\n      var newItem = {};\\n      Object.keys(_metadata).map(key => {\\n        if (key === 'id') newItem[key] = _data.length + 1;\\n        else newItem[key] = _metadata[key].default;\\n      });\\n      setData([..._data, newItem]);\\n    } else console.log('That is the max!!!');\\n  };\\n\\n  const handleOnDelete = () => {\\n    if (_data.length > min) {\\n      console.log('We are deleting data');\\n      setData(_data.filter(item => item.id !== _data.length));\\n    } else console.log('That is the min!!!');\\n  };\\n\\n  return (\\n    <Table\\n      onItemChange={onItemChange}\\n      data={_data}\\n      metadata={_metadata}\\n      handleOnAdd={handleOnAdd}\\n      handleOnDelete={handleOnDelete}\\n      handleOnSave={args.handleOnSave}\\n      {...args}\\n    />\\n  );\\n}\" }, ...WorkOut.parameters };\nProject.parameters = { storySource: { source: \"args => {\\n  const [_data, setData] = useState([]);\\n  const [_metadata, setMetadata] = useState({});\\n  const [min, setMin] = useState(args.min);\\n  const [max, setMax] = useState(args.max);\\n  const [_format, setFormat] = useState(args.format);\\n  const [initialDate, setInitialDate] = useState(args.initialDate);\\n  const [months, setMonths] = useState(\\n    Array.from(Array(12).keys()).map(month => moment(initialDate).add(month, 'M').format(_format)),\\n  );\\n\\n  useEffect(() => {\\n    setMin(args.min);\\n    setMax(args.max);\\n\\n    args.schema = { ...args.schema, end_date: { name: 'end_date', type: 'date' } };\\n    months.map(month => {\\n      args.schema = { ...args.schema, [month]: { name: [month], type: 'number' } };\\n    });\\n    setMetadata(args.schema);\\n\\n    setData(\\n      args.dataset.map(item => {\\n        return {\\n          ...item,\\n          end_date: moment(item.start_date).add(item.duration, 'M').format(_format),\\n        };\\n      }),\\n    );\\n  }, [args.max, args.min]);\\n\\n  const onItemChange = udpatedItem => {\\n    console.log('Itemmmmmmmm is changing!!!');\\n    console.log(udpatedItem);\\n    setData(\\n      _data.map(item => {\\n        if (item.id === udpatedItem.id) {\\n          return udpatedItem;\\n        }\\n        return item;\\n      }),\\n    );\\n  };\\n\\n  const handleOnAdd = () => {\\n    console.log(max);\\n    if (_data.length < max) {\\n      console.log('Adding row!!!');\\n      var newItem = {};\\n      Object.keys(_metadata).map(key => {\\n        if (key === 'id') newItem[key] = _data.length + 1;\\n        else newItem[key] = _metadata[key].default;\\n      });\\n      setData([..._data, newItem]);\\n    } else console.log('That is the max!!!');\\n  };\\n\\n  return (\\n    <Table\\n      data={_data}\\n      metadata={_metadata}\\n      onItemChange={onItemChange}\\n      handleOnAdd={handleOnAdd}\\n      {...args}\\n    />\\n  );\\n}\" }, ...Project.parameters };"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAFA;AAKA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AANA;AAUA;AAxDA;AAwDA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAHA;AAKA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AARA;AAUA;AACA;AACA;AACA;AACA;AACA;AAtBA;AAyBA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AADA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AAEA;AAEA;AAFA;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAJA;AAQA;AAlEA;AAoEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAHA;AANA;AAYA;AACA;AACA;AACA;AACA;AACA;AAxCA;AA6CA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;A","sourceRoot":""}